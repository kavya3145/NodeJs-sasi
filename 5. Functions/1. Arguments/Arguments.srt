1
00:00:00,000 --> 00:00:07,000
[? Music ?] [Treehouse]

2
00:00:07,000 --> 00:00:10,000
Functions are an important part of JavaScript.

3
00:00:10,000 --> 00:00:14,000
They're a way that we can store code to call later in our programs.

4
00:00:14,000 --> 00:00:18,000
In these videos we'll be learning how to use functions in JavaScript.

5
00:00:18,000 --> 00:00:21,000
Now we're going to begin learning about JavaScript functions.

6
00:00:21,000 --> 00:00:23,000
You'll remember functions from Introduction to Programming

7
00:00:23,000 --> 00:00:28,000
and how they allow us to store code into reusable bits that we can call later.

8
00:00:28,000 --> 00:00:31,000
Now this is really exciting because as we learn JavaScript functions 

9
00:00:31,000 --> 00:00:36,000
we'll begin to be able to interact with our web page in a more fun way.

10
00:00:36,000 --> 00:00:39,000
Rather than just logging to the console we'll be able to start 

11
00:00:39,000 --> 00:00:43,000
actually interacting with page elements because the way the browser works

12
00:00:43,000 --> 00:00:48,000
is it uses functions and events to actually interact with the page.

13
00:00:48,000 --> 00:00:51,000
We'll see a little bit more about that as we come up on it, 

14
00:00:51,000 --> 00:00:53,000
but I just want to show you that as we learn functions

15
00:00:53,000 --> 00:00:56,000
we're actually going to start doing some interesting things and get 

16
00:00:56,000 --> 00:00:59,000
out of the console and into the page.

17
00:00:59,000 --> 00:01:02,000
But before we do that let's take a little review on what functions are

18
00:01:02,000 --> 00:01:04,000
and how they work in JavaScript.

19
00:01:04,000 --> 00:01:07,000
We'll be working on this simple HTML page that has a single

20
00:01:07,000 --> 00:01:10,000
JavaScript page loaded into it, and we'll be editing

21
00:01:10,000 --> 00:01:12,000
those two as we learn about functions.

22
00:01:12,000 --> 00:01:16,000
We have our index.html page, which just has some basic styling,

23
00:01:16,000 --> 00:01:19,000
and we're including our functions.js,

24
00:01:19,000 --> 00:01:22,000
and our functions.js is empty.

25
00:01:22,000 --> 00:01:27,000
The basic way we can create a function in JavaScript is using the function keyword,

26
00:01:27,000 --> 00:01:30,000
and here is the sort of basic syntax we can use to generate

27
00:01:30,000 --> 00:01:34,000
a function that will take some sort of action when we call it.

28
00:01:34,000 --> 00:01:37,000
We start with the word &quot;function,&quot; and you'll notice it highlights blue because 

29
00:01:37,000 --> 00:01:40,000
function is a JavaScript keyword.

30
00:01:40,000 --> 00:01:44,000
The next thing we're going to do in this syntax is give the function a name,

31
00:01:44,000 --> 00:01:48,000
and the name should be descriptive of what the function does or what it returns. 

32
00:01:48,000 --> 00:01:51,000
In our case I'm going to make a very simple function that calls

33
00:01:51,000 --> 00:01:56,000
console.log with some information, and I'm going to have it say &quot;sayHello.&quot;

34
00:01:56,000 --> 00:01:59,000
So, I'm going to call this function &quot;sayHello.&quot;

35
00:01:59,000 --> 00:02:03,000
We can name our function using the same rules that we've used for naming variables.

36
00:02:03,000 --> 00:02:08,000
We can have letters or numbers so long as it doesn't begin with a number,

37
00:02:08,000 --> 00:02:11,000
and the same special characters apply, so this sayHello

38
00:02:11,000 --> 00:02:15,000
would be a valid variable name, and so it's also a valid function name.

39
00:02:15,000 --> 00:02:19,000
We have function sayHello, and I'm going to put a space,

40
00:02:19,000 --> 00:02:24,000
and then I'm going to list the parameters or arguments that my function can take.

41
00:02:24,000 --> 00:02:27,000
A function is able to take in different arguments

42
00:02:27,000 --> 00:02:31,000
that will be variables passed in that allow us to change the behavior

43
00:02:31,000 --> 00:02:35,000
of our actual function call each and every time we call it.

44
00:02:35,000 --> 00:02:38,000
Right now I'm going to leave it blank, being empty parentheses, 

45
00:02:38,000 --> 00:02:41,000
but even though it's taking no arguments we still need to have 

46
00:02:41,000 --> 00:02:44,000
our parentheses in place.

47
00:02:44,000 --> 00:02:47,000
I have our parentheses, and then I'll put another space,

48
00:02:47,000 --> 00:02:52,000
and we'll begin our curly braces, and the curly braces delineate the body of our function,

49
00:02:52,000 --> 00:02:54,000
so we'll open it up right there.

50
00:02:54,000 --> 00:02:57,000
And now we have a basic empty function,

51
00:02:57,000 --> 00:03:00,000
and I want it to actually do something, so let's make it very basic

52
00:03:00,000 --> 00:03:05,000
and use the familiar console.log, and it will say

53
00:03:05,000 --> 00:03:08,000
&quot;Hello World!&quot;

54
00:03:08,000 --> 00:03:10,000
We have a basic function called &quot;sayHello,&quot;

55
00:03:10,000 --> 00:03:16,000
and the body of that function is a piece of code that says &quot;console.log(&quot;Hello World!&quot;).&quot;

56
00:03:16,000 --> 00:03:18,000
So what happens if we run this in our page?

57
00:03:18,000 --> 00:03:20,000
Let's flip to our browser.

58
00:03:20,000 --> 00:03:23,000
I'm going to refresh, and let's open up our console.

59
00:03:23,000 --> 00:03:26,000
And right now we see nothing in our console.

60
00:03:26,000 --> 00:03:30,000
However, if we start typing &quot;sayHello&quot;

61
00:03:30,000 --> 00:03:35,000
you'll see it autocompleted, and what we can do is actually call this function. 

62
00:03:35,000 --> 00:03:38,000
And the way we call the function is by giving its name

63
00:03:38,000 --> 00:03:42,000
and then using parentheses immediately after it.

64
00:03:42,000 --> 00:03:45,000
Now, these parentheses are where we pass in the values we want to 

65
00:03:45,000 --> 00:03:50,000
assign to our arguments, but remember sayHello doesn't take any arguments yet,

66
00:03:50,000 --> 00:03:53,000
so it will be an open parenthesis and a closed parenthesis,

67
00:03:53,000 --> 00:03:57,000
and if we execute that code you'll notice that the console.log

68
00:03:57,000 --> 00:04:02,000
has written &quot;Hello World!&quot; to our console, and we see this extra line here saying &quot;undefined.&quot;

69
00:04:02,000 --> 00:04:08,000
You'll remember that our console will tell us the value of the previous expression given.

70
00:04:08,000 --> 00:04:11,000
Now, when we called sayHello it's evaluated to undefined,

71
00:04:11,000 --> 00:04:14,000
and we'll see what that means a little bit later,

72
00:04:14,000 --> 00:04:19,000
but basically every time we call a function some sort of value is evaluated from it,

73
00:04:19,000 --> 00:04:21,000
and we can control what that is.

74
00:04:21,000 --> 00:04:23,000
But in our case we haven't returned anything, 

75
00:04:23,000 --> 00:04:26,000
and we'll see what that means in a second, but right now

76
00:04:26,000 --> 00:04:28,000
we can just say that when we call sayHello 

77
00:04:28,000 --> 00:04:32,000
the value that it evaluates to is undefined.

78
00:04:32,000 --> 00:04:35,000
We can call it in our console, but we can also call our function

79
00:04:35,000 --> 00:04:42,000
anywhere in our code, so what we can do is do &quot;sayHello,&quot;

80
00:04:42,000 --> 00:04:46,000
and now that we've called sayHello after we've defined sayHello

81
00:04:46,000 --> 00:04:52,000
if we refresh our page immediately we should see Hello World! logged to our screen.

82
00:04:52,000 --> 00:04:56,000
The benefit of this is now instead of just calling console.log(&quot;Hello World!&quot;)

83
00:04:56,000 --> 00:04:58,000
we can call it multiple times.

84
00:04:58,000 --> 00:05:03,000
If we want to say &quot;Hello World!&quot; in several places in our code

85
00:05:03,000 --> 00:05:06,000
we can reuse this sayHello call.

86
00:05:06,000 --> 00:05:09,000
If we save out our script and we refresh the browser

87
00:05:09,000 --> 00:05:14,000
we'll now see that every time we called sayHello our console.log code has run.

88
00:05:14,000 --> 00:05:16,000
Now, this isn't a very useful example.

89
00:05:16,000 --> 00:05:19,000
We're really just changing one line of code to be 

90
00:05:19,000 --> 00:05:22,000
wrapped in a function that we can call later, and that may be helpful,

91
00:05:22,000 --> 00:05:27,000
but really where functions are useful are that they can take arguments

92
00:05:27,000 --> 00:05:31,000
and return values, so let's change our sayHello function around.

93
00:05:31,000 --> 00:05:36,000
Let's say instead of saying &quot;Hello World!&quot; we wanted to say somebody's name.

94
00:05:36,000 --> 00:05:38,000
Well, that means every time we call sayHello

95
00:05:38,000 --> 00:05:40,000
we need to pass in a different name,

96
00:05:40,000 --> 00:05:43,000
so that's what arguments are for, and our arguments are defined

97
00:05:43,000 --> 00:05:45,000
after the name of our function.

98
00:05:45,000 --> 00:05:47,000
These are going to be named like normal variables,

99
00:05:47,000 --> 00:05:53,000
and they'll act very much like normal variables within our function scope.

100
00:05:53,000 --> 00:05:58,000
Let's say our sayHello function will take an argument name.

101
00:05:58,000 --> 00:06:00,000
Now we have a name variable that's useful inside of our function,

102
00:06:00,000 --> 00:06:09,000
and let's see what happens if we add name to our console.log.

103
00:06:09,000 --> 00:06:12,000
Now, if we refresh we'll see Hello World! in undefined.

104
00:06:12,000 --> 00:06:17,000
That's because we've defined an argument called &quot;name&quot; in our sayHello function,

105
00:06:17,000 --> 00:06:21,000
but we have not passed it in to any of our calls.

106
00:06:21,000 --> 00:06:24,000
Let's actually go down and change our first call here

107
00:06:24,000 --> 00:06:32,000
and pass in an argument, and we'll say &quot;sayHello(&quot;Jim&quot;).&quot;

108
00:06:32,000 --> 00:06:35,000
What will happen is when we call sayHello with Jim 

109
00:06:35,000 --> 00:06:38,000
when we actually execute the code inside of sayHello

110
00:06:38,000 --> 00:06:42,000
name will hold the value of Jim because that's what we passed in 

111
00:06:42,000 --> 00:06:45,000
in this particular function implication, 

112
00:06:45,000 --> 00:06:48,000
which means when we do console.log(&quot;Hello World!,&quot; name)

113
00:06:48,000 --> 00:06:51,000
in our first invocation name will be Jim,

114
00:06:51,000 --> 00:06:55,000
so we should see Hello World! and Jim.

115
00:06:55,000 --> 00:06:57,000
And that's exactly what we see.

116
00:06:57,000 --> 00:07:00,000
Now, we can have multiple arguments being passed to our sayHello

117
00:07:00,000 --> 00:07:03,000
by separating them by commas. 

118
00:07:03,000 --> 00:07:07,000
What if I don't want to say hello but instead have a different greeting?

119
00:07:07,000 --> 00:07:11,000
What I could do is create another argument called &quot;greeting.&quot;

120
00:07:11,000 --> 00:07:15,000
Instead of saying &quot;Hello World!&quot; let's delete the hello,

121
00:07:15,000 --> 00:07:19,000
and the first thing we'll log is our greeting,

122
00:07:19,000 --> 00:07:22,000
and let's make sure there's a space there.

123
00:07:22,000 --> 00:07:24,000
What happens now?

124
00:07:24,000 --> 00:07:27,000
If I refresh we'll see &quot;undefined,&quot; &quot;world,&quot; and &quot;Jim.&quot;

125
00:07:27,000 --> 00:07:29,000
Now, I'm going to change this console.log around. 

126
00:07:29,000 --> 00:07:32,000
Instead of passing in different arguments to console.log

127
00:07:32,000 --> 00:07:37,000
let's create a string by simply joining our variables together

128
00:07:37,000 --> 00:07:41,000
with the concatenation operator here, the + operator. 

129
00:07:41,000 --> 00:07:44,000
Now we should get a very similar result.

130
00:07:44,000 --> 00:07:46,000
We just have a string.

131
00:07:46,000 --> 00:07:49,000
Now, we're getting undefined showing up in our strings because 

132
00:07:49,000 --> 00:07:53,000
our greeting is not being passed to any of our invocations of sayHello

133
00:07:53,000 --> 00:07:55,000
and because most of our invocations don't have name, 

134
00:07:55,000 --> 00:08:01,000
so what I'm going to do is I'm going to go ahead and just delete these ones right here.

135
00:08:01,000 --> 00:08:04,000
In this invocation I will pass in a second argument, and we'll go ahead and 

136
00:08:04,000 --> 00:08:07,000
just say &quot;Greetings.&quot;

137
00:08:07,000 --> 00:08:12,000
And so if we go back and we refresh we now see &quot;Greetings World!&quot; and &quot;Jim.&quot;

138
00:08:12,000 --> 00:08:16,000
But what happens if I don't want to pass in a greeting?

139
00:08:16,000 --> 00:08:19,000
Well, let's do another sayHello,

140
00:08:19,000 --> 00:08:24,000
and we'll pass in a name but no greeting argument.

141
00:08:24,000 --> 00:08:27,000
Well, in JavaScript even though we defined our function and it takes 2 arguments

142
00:08:27,000 --> 00:08:32,000
we can pass any number of arguments we want when we actually call it.

143
00:08:32,000 --> 00:08:35,000
If we call too few arguments any arguments that don't have a value

144
00:08:35,000 --> 00:08:38,000
will have the value undefined within the function,

145
00:08:38,000 --> 00:08:41,000
and if we call too many arguments, well, 

146
00:08:41,000 --> 00:08:44,000
there's just no argument name to attach to that value.

147
00:08:44,000 --> 00:08:47,000
We can still access those extra values passed in, 

148
00:08:47,000 --> 00:08:49,000
but we'll see how to do that a little bit later.

149
00:08:49,000 --> 00:08:51,000
What happens right now?

150
00:08:51,000 --> 00:08:53,000
Well, if we only pass Jim, greeting will be bound to undefined,

151
00:08:53,000 --> 00:08:57,000
and given the code we should see &quot;undefined World! Jim,&quot;

152
00:08:57,000 --> 00:09:00,000
and that's not what I want, so we can add a little bit of code here

153
00:09:00,000 --> 00:09:04,000
and say &quot;if&quot;--and the way we can test to make sure 

154
00:09:04,000 --> 00:09:14,000
greeting is undefined is we could say &quot;type of greeting === undefined.&quot;

155
00:09:14,000 --> 00:09:17,000
And now we have this if clause, which we've seen before,

156
00:09:17,000 --> 00:09:20,000
and so if we have greeting being undefined

157
00:09:20,000 --> 00:09:26,000
what we can do is we can say &quot;greeting = Hello.&quot;

158
00:09:26,000 --> 00:09:31,000
What we've done here is effectively created a default value for our greeting parameter.

159
00:09:31,000 --> 00:09:33,000
If we call sayHello with only 1 argument

160
00:09:33,000 --> 00:09:37,000
greeting will be undefined, which means we'll define it to be hello.

161
00:09:37,000 --> 00:09:39,000
Let's see how that changes our code.

162
00:09:39,000 --> 00:09:41,000
We'll save it out, and we'll refresh, 

163
00:09:41,000 --> 00:09:44,000
and now we can see &quot;Hello World! Jim.&quot;

164
00:09:44,000 --> 00:09:48,000
We've seen how functions can take inputs called arguments. 

165
00:09:48,000 --> 00:09:51,000
In the next video we'll see how the function can provide an output

166
00:09:51,000 --> 00:09:54,000
called the return value.

167
00:09:54,000 --> 00:09:56,000
[? Music ?] [Treehouse]

