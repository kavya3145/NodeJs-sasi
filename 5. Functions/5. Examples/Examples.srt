1
00:00:00,000 --> 00:00:07,000
[??] [Treehouse]

2
00:00:07,000 --> 00:00:11,000
So now we've learned a lot about how functions work in JavaScript.

3
00:00:11,000 --> 00:00:14,000
Let's take a look at some practical examples.

4
00:00:14,000 --> 00:00:17,000
Now we've learned a little bit about functions, and that's really good

5
00:00:17,000 --> 00:00:22,000
because now we can start learning some about JavaScript in the browser.

6
00:00:22,000 --> 00:00:26,000
This badge is really more about JavaScript the language,

7
00:00:26,000 --> 00:00:29,000
and we have been avoiding actually browser-specific code

8
00:00:29,000 --> 00:00:34,000
in large part because the browser code that we use to interact with a page,

9
00:00:34,000 --> 00:00:39,000
even though we interact with it through JavaScript, is a completely different subject.

10
00:00:39,000 --> 00:00:43,000
The way we interact with a page is through a series of functions and objects

11
00:00:43,000 --> 00:00:48,000
that are defined in the environment of our browser that we interact with.

12
00:00:48,000 --> 00:00:53,000
And it's very complex, and it differs from browser to browser.

13
00:00:53,000 --> 00:00:57,000
That's where a lot of the headache in JavaScript programming comes from--

14
00:00:57,000 --> 00:01:03,000
cross-browser compatibility and what we're calling the document object model or DOM.

15
00:01:03,000 --> 00:01:05,000
And that DOM is what I was talking about.

16
00:01:05,000 --> 00:01:08,000
It's the interface we have to the actual elements on our page.

17
00:01:08,000 --> 00:01:13,000
It's how we could manipulate the contents of a div or change a style

18
00:01:13,000 --> 00:01:15,000
or add or remove elements.

19
00:01:15,000 --> 00:01:18,000
We're aren't going to be going in depth in these examples.

20
00:01:18,000 --> 00:01:23,000
I'm going to show you some very basic things, and they will work in at least this browser,

21
00:01:23,000 --> 00:01:26,000
but I just want to show you how we can use JavaScript to interact with a page.

22
00:01:26,000 --> 00:01:31,000
To make our lives easier, to smooth out the difference between the different browsers

23
00:01:31,000 --> 00:01:35,000
and to make the whole interacting with the page much more enjoyable,

24
00:01:35,000 --> 00:01:38,000
we have libraries like jQuery.

25
00:01:38,000 --> 00:01:41,000
jQuery is just JavaScript code that's been written 

26
00:01:41,000 --> 00:01:45,000
to take into account all of the differences between browsers 

27
00:01:45,000 --> 00:01:50,000
and provide useful and easy-to-use functions like we've created here

28
00:01:50,000 --> 00:01:52,000
that allow us to manipulate the page 

29
00:01:52,000 --> 00:01:56,000
without worrying about all of the stuff we're about to see right here.

30
00:01:56,000 --> 00:02:00,000
So if we take a look at our page, we have a button and we have an input,

31
00:02:00,000 --> 00:02:05,000
and those are the 2 things I'm going to be mainly dealing with in our code.

32
00:02:05,000 --> 00:02:09,000
If we look at the HTML, I've added an ID property to each of these 2 elements,

33
00:02:09,000 --> 00:02:14,000
and that's because an ID is the easiest way to retrieve an element

34
00:02:14,000 --> 00:02:17,000
and store it into a JavaScript variable.

35
00:02:17,000 --> 00:02:19,000
Let's take a look here.

36
00:02:19,000 --> 00:02:23,000
I want to be able to hold an object that represents my button 

37
00:02:23,000 --> 00:02:26,000
from inside my JavaScript program.

38
00:02:26,000 --> 00:02:30,000
So we'll start off with our normal var keyword,

39
00:02:30,000 --> 00:02:33,000
and let's store it into a variable called button.

40
00:02:33,000 --> 00:02:37,000
And now this is where we get into the document object model.

41
00:02:37,000 --> 00:02:41,000
I'm going to explain this briefly, but this will be a whole other set of videos

42
00:02:41,000 --> 00:02:45,000
and a whole other badge that we'll be going over in a little bit.

43
00:02:45,000 --> 00:02:48,000
The way we interact or get this button off of the page

44
00:02:48,000 --> 00:02:53,000
is through an object that's available from our browser called the document.

45
00:02:53,000 --> 00:02:56,000
Now, document isn't part of the JavaScript language,

46
00:02:56,000 --> 00:02:59,000
but it is part of JavaScript's DOM 

47
00:02:59,000 --> 00:03:04,000
or the environment that you'll be using JavaScript inside the browser.

48
00:03:04,000 --> 00:03:08,000
If you're using JavaScript in another environment like in noJS, 

49
00:03:08,000 --> 00:03:10,000
document won't be defined.

50
00:03:10,000 --> 00:03:13,000
You'll notice that my text editor here has highlighted the word document

51
00:03:13,000 --> 00:03:17,000
because it is part of the DOM and is recognized

52
00:03:17,000 --> 00:03:19,000
but is not a language feature.

53
00:03:19,000 --> 00:03:22,000
Rather, it's just a variable that's used in the browsers.

54
00:03:22,000 --> 00:03:25,000
And this is where we can get our elements off of the page--

55
00:03:25,000 --> 00:03:30,000
document.getElementById.

56
00:03:30,000 --> 00:03:34,000
This is a method that's exposed to us by the browser.

57
00:03:34,000 --> 00:03:36,000
This is a pretty common method.

58
00:03:36,000 --> 00:03:39,000
This is pretty much usable in any browser,

59
00:03:39,000 --> 00:03:42,000
and there's not a whole lot of cross-browser quirks associated with it.

60
00:03:42,000 --> 00:03:46,000
The syntax is it's a method, so we'll use parentheses to call it,

61
00:03:46,000 --> 00:03:51,000
just like a normal function, and then we pass it the ID of the element we want to get.

62
00:03:51,000 --> 00:03:53,000
Again you'll remember I gave IDs to these functions

63
00:03:53,000 --> 00:03:59,000
because I want to use getElementById, and I gave the button the ID of action.

64
00:03:59,000 --> 00:04:09,000
So if I do action here, now we have stored into button our actual button that's on the page.

65
00:04:09,000 --> 00:04:12,000
However, there is 1 thing we need to do.

66
00:04:12,000 --> 00:04:14,000
Let's take a look at this real quick.

67
00:04:14,000 --> 00:04:18,000
I've refreshed the page, and I have a variable called button,

68
00:04:18,000 --> 00:04:21,000
and you'll see it autocompleted because it's set.

69
00:04:21,000 --> 00:04:24,000
But what happens when we evaluate it? It's null.

70
00:04:24,000 --> 00:04:30,000
It's not undefined, it's null, which means we didn't get our button object stored into button,

71
00:04:30,000 --> 00:04:32,000
and that's for a very simple reason.

72
00:04:32,000 --> 00:04:36,000
As soon as we load this script tag, it runs our code,

73
00:04:36,000 --> 00:04:40,000
and our code is looking for an element with an ID of action.

74
00:04:40,000 --> 00:04:42,000
But if we look at the order of our code,

75
00:04:42,000 --> 00:04:44,000
our browser hasn't actually gotten to that code yet,

76
00:04:44,000 --> 00:04:48,000
so there is no button on the page when we call it.

77
00:04:48,000 --> 00:04:51,000
And that's where you'll see things like document.ready coming into place

78
00:04:51,000 --> 00:04:53,000
that comes from jQuery,

79
00:04:53,000 --> 00:04:56,000
which means that it actually waits to execute some code

80
00:04:56,000 --> 00:04:59,000
that you store in an anonymous function,

81
00:04:59,000 --> 00:05:03,000
and it waits until the entire page is loaded up and everything is ready to go.

82
00:05:03,000 --> 00:05:08,000
We could do that, but the easiest way to fix this is we will take our script

83
00:05:08,000 --> 00:05:11,000
and put it at the bottom of our page.

84
00:05:13,000 --> 00:05:16,000
So now by the time we call script, our button with the ID of action

85
00:05:16,000 --> 00:05:19,000
and our input have been added to the page,

86
00:05:19,000 --> 00:05:26,000
and when we call this code, immediately it will be able to find the element with the ID of action.

87
00:05:26,000 --> 00:05:30,000
So if we save everything out and refresh, now we can look at the button.

88
00:05:30,000 --> 00:05:35,000
You'll see that the console has printed it out as the HTML that defines the button.

89
00:05:35,000 --> 00:05:40,000
And in fact, if I mouse over it, it will actually show me where on the page it is.

90
00:05:40,000 --> 00:05:42,000
This button is what we call a DOM element.

91
00:05:42,000 --> 00:05:45,000
There are some properties and methods to manipulate this button.

92
00:05:45,000 --> 00:05:47,000
Let's go ahead and grab our input.

93
00:05:47,000 --> 00:05:50,000
I'm going to store that into input.

94
00:05:51,000 --> 00:05:55,000
And we have the ID of text_field.

95
00:06:00,000 --> 00:06:09,000
And so if we refresh, we can get button and we have our text_field, and there we go.

96
00:06:09,000 --> 00:06:14,000
The way we interact with a page is we can do things like console.log

97
00:06:14,000 --> 00:06:18,000
or take actions right from within our main content right here.

98
00:06:18,000 --> 00:06:22,000
But remember, this is all executed as soon as the script loads.

99
00:06:22,000 --> 00:06:24,000
Usually when we want to interact with a page,

100
00:06:24,000 --> 00:06:27,000
it has to do with some sort of user interaction

101
00:06:27,000 --> 00:06:30,000
or some other cue like a timer going off

102
00:06:30,000 --> 00:06:33,000
or maybe some input coming in from the server,

103
00:06:33,000 --> 00:06:38,000
which means that we have to have some way to hold on to that code

104
00:06:38,000 --> 00:06:41,000
and call it when that particular event happens.

105
00:06:41,000 --> 00:06:43,000
That's exactly what functions are for.

106
00:06:43,000 --> 00:06:48,000
We can store code in them and hold on to them until we want to use them.

107
00:06:48,000 --> 00:06:52,000
So let's say we want to do something when we click this button.

108
00:06:52,000 --> 00:06:55,000
Right now nothing happens when we click it.

109
00:06:56,000 --> 00:06:59,000
Let's do a very simple example.

110
00:06:59,000 --> 00:07:03,000
What we could do is say button.

111
00:07:03,000 --> 00:07:07,000
This is not the preferred way to do this, but this is actually one of the oldest

112
00:07:07,000 --> 00:07:12,000
and most compatible ways, but it's not ideal for a few reasons. But let's take a look.

113
00:07:12,000 --> 00:07:16,000
We'll say button.onclick = 

114
00:07:16,000 --> 00:07:19,000
And this is setting what we call a property on the button.

115
00:07:19,000 --> 00:07:23,000
It's like a variable that's associated with that button instance.

116
00:07:23,000 --> 00:07:29,000
So button has a property called onclick, and what we're going to do is assign it a value,

117
00:07:29,000 --> 00:07:31,000
and this is going to be a function.

118
00:07:31,000 --> 00:07:34,000
We could give it a named function,

119
00:07:34,000 --> 00:07:37,000
but we could also do this anonymous.

120
00:07:38,000 --> 00:07:42,000
So we could say button.onclick = function,

121
00:07:42,000 --> 00:07:48,000
and we'll say console.log 'clicked'.

122
00:07:48,000 --> 00:07:53,000
Now what we've done is by assigning to this special onclick event,

123
00:07:53,000 --> 00:07:57,000
the browser is going to tell you when it's clicked by calling this function.

124
00:07:57,000 --> 00:07:59,000
So if we refresh--

125
00:07:59,000 --> 00:08:04,000
Silly me. I forgot parentheses there. I forgot what language I was in for a moment.

126
00:08:04,000 --> 00:08:08,000
So now we have console.log and ('clicked').

127
00:08:08,000 --> 00:08:10,000
There we go. That should work.

128
00:08:10,000 --> 00:08:13,000
Now we don't see anything, but when we click it, 

129
00:08:13,000 --> 00:08:16,000
we can see that we're getting clicked logged,

130
00:08:16,000 --> 00:08:19,000
and console.log if it gets the same message over and over again

131
00:08:19,000 --> 00:08:24,000
will just put this counter in front of it so it doesn't fill up your scroll space.

132
00:08:24,000 --> 00:08:31,000
If you added a value in, it will continue adding that clicked console.log.

133
00:08:31,000 --> 00:08:34,000
So that's great, but it's not ideal.

134
00:08:34,000 --> 00:08:38,000
What if we wanted 2 things to happen when we call onclick?

135
00:08:38,000 --> 00:08:42,000
Let's say we wanted to have another output here.

136
00:08:42,000 --> 00:08:46,000
We'll say ('Other click listener').

137
00:08:46,000 --> 00:08:51,000
If we refresh, we only get the one from the other click listener,

138
00:08:51,000 --> 00:08:54,000
and that's because onclick can only hold 1 thing.

139
00:08:54,000 --> 00:08:57,000
We assign it here, but then we reassign the value,

140
00:08:57,000 --> 00:09:01,000
and that means onclick can only hold 1 thing, which isn't ideal.

141
00:09:01,000 --> 00:09:03,000
So we have another model that we can use,

142
00:09:03,000 --> 00:09:09,000
but this is a little more problematic because it works in most browsers except 1,

143
00:09:09,000 --> 00:09:12,000
and that one is called Internet Explorer.

144
00:09:12,000 --> 00:09:14,000
It has a slightly different model,

145
00:09:14,000 --> 00:09:16,000
and we're not going to get into the different ways of dealing with it.

146
00:09:16,000 --> 00:09:21,000
The code I'm going to show you now works in most browsers besides IE.

147
00:09:21,000 --> 00:09:25,000
So instead of doing button.onclick with our function,

148
00:09:25,000 --> 00:09:31,000
we're going to call a different method called addEventListener.

149
00:09:31,000 --> 00:09:36,000
This takes a few arguments, the first of which is the event we want to listen for--

150
00:09:36,000 --> 00:09:38,000
in our case, click.

151
00:09:38,000 --> 00:09:43,000
This is a special event keyword, click, meaning when somebody clicks it

152
00:09:43,000 --> 00:09:47,000
we're going to call this function--this function right here.

153
00:09:47,000 --> 00:09:50,000
I'm just going to use the same anonymous function.

154
00:09:50,000 --> 00:09:55,000
We can pass that as a parameter here. This is our second parameter, and we need to close it.

155
00:09:55,000 --> 00:09:59,000
So now we have our opening parentheses for our addEventListener call.

156
00:09:59,000 --> 00:10:04,000
It takes 2 arguments: first a string calling our type of event,

157
00:10:04,000 --> 00:10:07,000
and the second is our function to be called when that happens.

158
00:10:07,000 --> 00:10:12,000
If we were to save this code out and refresh, we'll actually see that both of them are called.

159
00:10:12,000 --> 00:10:15,000
That's because addEventListener doesn't interact with onclick.

160
00:10:15,000 --> 00:10:20,000
Instead, it works in a different way where we can add as many listeners as we'd like.

161
00:10:20,000 --> 00:10:24,000
We don't want to use onclick because it's not as flexible.

162
00:10:24,000 --> 00:10:28,000
So we'll just say 'Other Click'.

163
00:10:28,000 --> 00:10:31,000
So now by adding event listeners, we can add as many listeners as we want

164
00:10:31,000 --> 00:10:37,000
to our button's click event, and they'll all be called.

165
00:10:37,000 --> 00:10:40,000
What if in one of these we want to, let's say, manipulate the value of input?

166
00:10:40,000 --> 00:10:47,000
So we can say input.setAttribute.

167
00:10:47,000 --> 00:10:51,000
The attribute we want to change to actually change what's inside of an input

168
00:10:51,000 --> 00:10:53,000
is the value attribute.

169
00:10:53,000 --> 00:10:55,000
And then we'll just say what we want the value to be.

170
00:10:55,000 --> 00:10:59,000
We'll say 'Hello World'.

171
00:10:59,000 --> 00:11:02,000
Our first click listener just does console.log('clicked'),

172
00:11:02,000 --> 00:11:05,000
and our second one does another console.log('Other Click'),

173
00:11:05,000 --> 00:11:08,000
but it also interacts with a different DOM element on the page

174
00:11:08,000 --> 00:11:11,000
by calling another special method called setAttribute.

175
00:11:11,000 --> 00:11:15,000
We're setting the attribute value to 'Hello World'.

176
00:11:15,000 --> 00:11:18,000
And so if we click it, we can see not only did we get our console.logs,

177
00:11:18,000 --> 00:11:20,000
but now we're actually interacting with the page.

178
00:11:20,000 --> 00:11:23,000
We can change what's inside of it.

179
00:11:23,000 --> 00:11:25,000
This is just a very basic example.

180
00:11:25,000 --> 00:11:30,000
Again, there is so much to consider while actually dealing with the DOM elements.

181
00:11:30,000 --> 00:11:33,000
For instance, addEventListener won't work in some browsers;

182
00:11:33,000 --> 00:11:36,000
setAttribute may act differently or not how we want it.

183
00:11:36,000 --> 00:11:41,000
This is just a basic example of showing you why functions are so important in JavaScript,

184
00:11:41,000 --> 00:11:45,000
because everything that we do is pretty much associated with some event,

185
00:11:45,000 --> 00:11:49,000
and the only way to store the code until we actually want to use it

186
00:11:49,000 --> 00:11:51,000
is to store it into a function.

187
00:11:51,000 --> 00:11:54,000
And whether it's anonymous or a named function,

188
00:11:54,000 --> 00:11:57,000
we could have passed instead a variable that holds a function

189
00:11:57,000 --> 00:11:59,000
instead of this anonymous function,

190
00:11:59,000 --> 00:12:02,000
but ultimately, that's how we interact with our page.

191
00:12:02,000 --> 00:12:05,000
Again, in the later badges we'll see how to interact with the pages

192
00:12:05,000 --> 00:12:07,000
in a more meaningful way.

193
00:12:07,000 --> 00:12:10,000
But now you should have an idea of what JavaScript can do

194
00:12:10,000 --> 00:12:12,000
to actually interact with a page.

195
00:12:12,000 --> 00:12:16,000
We can listen for events as well as modify elements on the page.

196
00:12:16,000 --> 00:12:19,000
So we've learned how to use functions, how to use arguments and return values,

197
00:12:19,000 --> 00:12:24,000
and how scope and anonymous functions make our code easier to read.

198
00:12:24,000 --> 00:12:26,000
[??] [Treehouse]

