1
00:00:00,000 --> 00:00:07,000
[Treehouse]

2
00:00:07,000 --> 00:00:10,000
In the last video, we learned about methods

3
00:00:10,000 --> 00:00:12,000
and the special value called this. 

4
00:00:12,000 --> 00:00:15,000
Now we'll learn how to control the value of this

5
00:00:15,000 --> 00:00:17,000
with the methods call and apply. 

6
00:00:17,000 --> 00:00:20,000
So we saw how this can be bound to an object 

7
00:00:20,000 --> 00:00:23,000
by calling our method, like jim.name

8
00:00:23,000 --> 00:00:26,000
or by using our square brackets 

9
00:00:26,000 --> 00:00:31,000
and calling it jim[&quot;greet&quot;] and invoking it with parentheses. 

10
00:00:31,000 --> 00:00:33,000
This will be bound to Jim, 

11
00:00:33,000 --> 00:00:35,000
or in this case, this will be bound to Nick, 

12
00:00:35,000 --> 00:00:38,000
which provides us some useful functions in that we can reuse

13
00:00:38,000 --> 00:00:41,000
greet in several different objects

14
00:00:41,000 --> 00:00:45,000
and this will provide a nice level of variability

15
00:00:45,000 --> 00:00:48,000
where we can have the same method 

16
00:00:48,000 --> 00:00:51,000
be invoked on several different objects 

17
00:00:51,000 --> 00:00:54,000
and always have the correct but different behavior between them. 

18
00:00:54,000 --> 00:00:57,000
But we saw that there's a problem. 

19
00:00:57,000 --> 00:01:02,000
As soon as we de-reference or store a method into another variable, 

20
00:01:02,000 --> 00:01:05,000
we lose that binding of this to that object.  

21
00:01:05,000 --> 00:01:08,000
For instance, when we store jim.greet

22
00:01:08,000 --> 00:01:12,000
into the variable called &quot;jimgreet&quot; on line 28, 

23
00:01:12,000 --> 00:01:15,000
the binding from greets this variable

24
00:01:15,000 --> 00:01:19,000
loses its association with Jim. 

25
00:01:19,000 --> 00:01:21,000
So when we invoked it on line 29, 

26
00:01:21,000 --> 00:01:23,000
there's nothing for it to be bound to,

27
00:01:23,000 --> 00:01:27,000
so by default, in JavaScript it's bound to the window variable, 

28
00:01:27,000 --> 00:01:29,000
which is not very useful. 

29
00:01:29,000 --> 00:01:32,000
But what happens if we have to call a function

30
00:01:32,000 --> 00:01:35,000
as though it were a method on an object? 

31
00:01:35,000 --> 00:01:37,000
So here's one thing we could do. 

32
00:01:37,000 --> 00:01:39,000
Let's remove what is this. 

33
00:01:39,000 --> 00:01:43,000
We don't need this anymore, since we explored what this is when calling a normal function. 

34
00:01:43,000 --> 00:01:46,000
So if we go back and we refresh, 

35
00:01:46,000 --> 00:01:48,000
we can see we have three different things. 

36
00:01:48,000 --> 00:01:51,000
First we have &quot;Hello. I am James.&quot;

37
00:01:51,000 --> 00:01:54,000
Which you remember is for Jim, where we assigned .name here.

38
00:01:54,000 --> 00:01:57,000
So we can see that it gets the latest version

39
00:01:57,000 --> 00:01:59,000
of this.name, 

40
00:01:59,000 --> 00:02:02,000
which would be jim.name in line 25's 

41
00:02:02,000 --> 00:02:04,000
invocation of greet, 

42
00:02:04,000 --> 00:02:07,000
and then we get Nick's greeting, which is &quot;Hello. I am Nick.&quot; 

43
00:02:07,000 --> 00:02:11,000
Now, what's interesting is we say, &quot;Hello. I am the window.&quot; 

44
00:02:11,000 --> 00:02:14,000
That's because remember that 

45
00:02:14,000 --> 00:02:16,000
in this invocation here, 

46
00:02:16,000 --> 00:02:19,000
[jimGreet], this is the window, 

47
00:02:19,000 --> 00:02:22,000
and so window.name

48
00:02:22,000 --> 00:02:24,000
we assigned to the value &quot;the window.&quot; 

49
00:02:24,000 --> 00:02:28,000
However, window.name is a special property in JavaScript, 

50
00:02:28,000 --> 00:02:31,000
in the browser, in that it actually names

51
00:02:31,000 --> 00:02:33,000
our physical window--

52
00:02:33,000 --> 00:02:36,000
all of the chrome, the buttons, and everything.

53
00:02:36,000 --> 00:02:38,000
It's actually referring to that actual window, 

54
00:02:38,000 --> 00:02:43,000
and so name doesn't get reset every time we change our browser. 

55
00:02:43,000 --> 00:02:45,000
We've actually named our window

56
00:02:45,000 --> 00:02:48,000
so it persists as long as this window persists. 

57
00:02:48,000 --> 00:02:53,000
So to change it back we could do window.name=empty string.

58
00:02:53,000 --> 00:02:56,000
If we refresh we now see what would be the default,

59
00:02:56,000 --> 00:02:59,000
since the window name is now the empty string. 

60
00:02:59,000 --> 00:03:02,000
But on line 29, that's not what we want to do at all. 

61
00:03:02,000 --> 00:03:05,000
Instead we want [jimgreet] to be called 

62
00:03:05,000 --> 00:03:08,000
with the context of Jim, 

63
00:03:08,000 --> 00:03:10,000
meaning this will be bound to Jim. 

64
00:03:10,000 --> 00:03:13,000
And the way we can do that is through a special method 

65
00:03:13,000 --> 00:03:17,000
built onto all JavaScript functions called &quot;call.&quot; 

66
00:03:17,000 --> 00:03:19,000
So how do we do that? 

67
00:03:19,000 --> 00:03:22,000
Well, instead of just invoking the function with our parentheses, 

68
00:03:22,000 --> 00:03:25,000
[jimgreet], which is a function--

69
00:03:25,000 --> 00:03:27,000
and a function is actually a type of object, 

70
00:03:27,000 --> 00:03:30,000
meaning it itself has these key value properties. 

71
00:03:30,000 --> 00:03:33,000
And one of those key value properties

72
00:03:33,000 --> 00:03:38,000
that is on every function is one called &quot;call,&quot; C-A-L-L. 

73
00:03:38,000 --> 00:03:42,000
And this is a method which actually invokes itself. 

74
00:03:42,000 --> 00:03:45,000
So when we call it jimGreet.call, 

75
00:03:45,000 --> 00:03:48,000
it's going to literally call jimGreet. 

76
00:03:48,000 --> 00:03:51,000
But how this differs from normally invoking our function

77
00:03:51,000 --> 00:03:54,000
is that there is an extra argument

78
00:03:54,000 --> 00:03:56,000
added to the beginning of our method call. 

79
00:03:56,000 --> 00:03:59,000
So we'll say and that extra argument

80
00:03:59,000 --> 00:04:02,000
is what value should be bound to this

81
00:04:02,000 --> 00:04:05,000
in our invocation of this function. 

82
00:04:05,000 --> 00:04:08,000
So in our case, when we call a jimGreet, 

83
00:04:08,000 --> 00:04:11,000
we want this to be bound to Jim. 

84
00:04:11,000 --> 00:04:14,000
So if we refresh, we'll see now

85
00:04:14,000 --> 00:04:18,000
that that third call has Jim bound to this,

86
00:04:18,000 --> 00:04:21,000
and this is awesome because even though jim.greet

87
00:04:21,000 --> 00:04:24,000
came from Jim, we can change what it is 

88
00:04:24,000 --> 00:04:26,000
on the fly. 

89
00:04:26,000 --> 00:04:29,000
For instance, if we want to call it with a context bound to Nick, 

90
00:04:29,000 --> 00:04:32,000
we can just do jimGreet.call,

91
00:04:32,000 --> 00:04:34,000
pass in the Nick object,

92
00:04:34,000 --> 00:04:38,000
and now this and greet will be bound to Nick,

93
00:04:38,000 --> 00:04:41,000
so nick.name is Nick. 

94
00:04:41,000 --> 00:04:44,000
So if we refresh, we can see it's now Nick. 

95
00:04:44,000 --> 00:04:47,000
And in fact it really doesn't matter where we pass it to. 

96
00:04:47,000 --> 00:04:50,000
We can pass it an empty object,

97
00:04:50,000 --> 00:04:53,000
and if we refresh we'll see &quot;I am undefined,&quot;

98
00:04:53,000 --> 00:04:56,000
because an empty object doesn't have a value

99
00:04:56,000 --> 00:04:58,000
for the key name, 

100
00:04:58,000 --> 00:05:05,000
and if we have an object like var obj equals the empty object-- 

101
00:05:05,000 --> 00:05:08,000
which is curly brace open, curly brace closed--

102
00:05:08,000 --> 00:05:11,000
with no key value pairs, 

103
00:05:11,000 --> 00:05:14,000
we try to access a key like name,

104
00:05:14,000 --> 00:05:16,000
everything is undefined, 

105
00:05:16,000 --> 00:05:19,000
so that's why we get &quot;I am undefined.&quot; 

106
00:05:19,000 --> 00:05:22,000
It doesn't matter what we have here.

107
00:05:22,000 --> 00:05:25,000
It's always going to be undefined. 

108
00:05:25,000 --> 00:05:28,000
Or we could go a step further and just define 

109
00:05:28,000 --> 00:05:31,000
as much of the object as we need to. 

110
00:05:31,000 --> 00:05:34,000
In our case, we'll say &quot;Amit.&quot; 

111
00:05:34,000 --> 00:05:39,000
And if we refresh we can see we say, &quot;Hello. I am Amit.&quot; 

112
00:05:39,000 --> 00:05:42,000
And that's great. 

113
00:05:42,000 --> 00:05:45,000
In fact, we don't even have to store this into a variable to use this

114
00:05:45,000 --> 00:05:48,000
because it's available on any function. 

115
00:05:48,000 --> 00:05:56,000
So if we were to even call jim.greet.call[nick], 

116
00:05:56,000 --> 00:05:58,000
what's happening? 

117
00:05:58,000 --> 00:06:01,000
Well, we have the object Jim, and then we're getting

118
00:06:01,000 --> 00:06:03,000
what's in the greet key, which is our function. 

119
00:06:03,000 --> 00:06:06,000
Our function has a call method that's built in,

120
00:06:06,000 --> 00:06:09,000
which will invoke greet with a context

121
00:06:09,000 --> 00:06:11,000
down to this. 

122
00:06:11,000 --> 00:06:13,000
Now, context should be Nick. 

123
00:06:13,000 --> 00:06:17,000
So we can just do hello. And now we see, &quot;Hello. I am Nick.&quot; 

124
00:06:17,000 --> 00:06:20,000
Now, besides call, there's another method

125
00:06:20,000 --> 00:06:23,000
that's built in just like call that works almost the exact same way,

126
00:06:23,000 --> 00:06:26,000
and that method is apply. 

127
00:06:26,000 --> 00:06:30,000
You'll see it's highlighted the same way call is in our editor. 

128
00:06:30,000 --> 00:06:33,000
In fact, in this example, they're exactly the same. 

129
00:06:33,000 --> 00:06:36,000
If we refresh, we get the exact same results. 

130
00:06:36,000 --> 00:06:39,000
How call and apply differ

131
00:06:39,000 --> 00:06:42,000
is how they take arguments. 

132
00:06:42,000 --> 00:06:46,000
Now, our greet function, right now, doesn't contain any arguments,

133
00:06:46,000 --> 00:06:49,000
but I'm going to change it around with a snap. 

134
00:06:49,000 --> 00:06:54,000
Now I've updated this function with a little bit more logic. 

135
00:06:54,000 --> 00:06:57,000
I added two parameters that we'll take. 

136
00:06:57,000 --> 00:06:59,000
First is the name of the person we're greeting, 

137
00:06:59,000 --> 00:07:01,000
and the second is our current mood. 

138
00:07:01,000 --> 00:07:06,000
Now lines 8 and 9 here are to make name and mood optional. 

139
00:07:06,000 --> 00:07:10,000
What we're doing is we're saying name equals.

140
00:07:10,000 --> 00:07:13,000
If name exists, we'll just say name is name

141
00:07:13,000 --> 00:07:15,000
and we'll not do anything. 

142
00:07:15,000 --> 00:07:17,000
However, if name is undefined or false, 

143
00:07:17,000 --> 00:07:19,000
we use the or operator, 

144
00:07:19,000 --> 00:07:22,000
and that's the two vertical pipes right here. 

145
00:07:22,000 --> 00:07:25,000
This means &quot;or&quot; in JavaScript. 

146
00:07:25,000 --> 00:07:30,000
So this expression means name equals either name or you. 

147
00:07:30,000 --> 00:07:34,000
If name is true, name or you will return name;

148
00:07:34,000 --> 00:07:37,000
however, if it's false, it will take the right-hand side of or. 

149
00:07:37,000 --> 00:07:39,000
So this is a convenient way of saying 

150
00:07:39,000 --> 00:07:42,000
if something is false, provide a default value. 

151
00:07:42,000 --> 00:07:46,000
So if we pass in nothing, name would be undefined,

152
00:07:46,000 --> 00:07:51,000
so we'd say undefined or, if it's undefined or false, give it you. 

153
00:07:51,000 --> 00:07:53,000
And the same thing for mood. 

154
00:07:53,000 --> 00:07:56,000
So basically, if we just call greet with no parameters, 

155
00:07:56,000 --> 00:07:59,000
we will get the name being you

156
00:07:59,000 --> 00:08:01,000
and the mood being good. 

157
00:08:01,000 --> 00:08:04,000
So now that we've got those two parameters that are optional, 

158
00:08:04,000 --> 00:08:06,000
we changed our console.log here a little bit 

159
00:08:06,000 --> 00:08:08,000
to integrate those.

160
00:08:08,000 --> 00:08:11,000
We're basically constructing a string by concatenating multiple things together,

161
00:08:11,000 --> 00:08:14,000
and I've just broken it onto different lines to make it more readable. 

162
00:08:14,000 --> 00:08:17,000
So we'll say &quot;Hello&quot; to the name of the person we're greeting, 

163
00:08:17,000 --> 00:08:20,000
and that comes from up here, &quot;I am,&quot; and then my name

164
00:08:20,000 --> 00:08:23,000
by saying this.name, and then finally

165
00:08:23,000 --> 00:08:28,000
&quot;and I am in a&quot; blank, which will be mood--mood. 

166
00:08:28,000 --> 00:08:30,000
So let's just see how that starts off. 

167
00:08:30,000 --> 00:08:32,000
Considering that we haven't changed anything, 

168
00:08:32,000 --> 00:08:37,000
these should now say &quot;Hello, you. I am James,&quot;--or Nick or Amit--

169
00:08:37,000 --> 00:08:39,000
&quot;and I am in a good mood.&quot; 

170
00:08:39,000 --> 00:08:41,000
Now there is a little something I want to change.

171
00:08:41,000 --> 00:08:43,000
It looks like we should put a space right there, 

172
00:08:43,000 --> 00:08:49,000
just to alleviate where You and I are mixed together there. 

173
00:08:49,000 --> 00:08:51,000
There we go. 

174
00:08:51,000 --> 00:08:53,000
And now we have some parameters for greet. 

175
00:08:53,000 --> 00:08:55,000
And we can see how that works. 

176
00:08:55,000 --> 00:08:58,000
We could say, &quot;Hello, Ryan,&quot; and pass in a mood 

177
00:08:58,000 --> 00:09:01,000
and just say, &quot;awesome.&quot;

178
00:09:01,000 --> 00:09:03,000
And one of our invocations here will now say, 

179
00:09:03,000 --> 00:09:06,000
&quot;Hello, Ryan. I am James, and I am in an awesome mood.&quot; 

180
00:09:06,000 --> 00:09:10,000
Well, in &quot;a&quot; awesome mood, but we're not going to change that to be correct. 

181
00:09:10,000 --> 00:09:14,000
We'll just go with the grammatical error that is standing there. 

182
00:09:14,000 --> 00:09:17,000
So how does this interact with call and apply? 

183
00:09:17,000 --> 00:09:20,000
Well, let's take a look at our code. 

184
00:09:20,000 --> 00:09:23,000
When we use the call method, 

185
00:09:23,000 --> 00:09:26,000
what we can do is just pass in our arguments after our first argument.

186
00:09:26,000 --> 00:09:30,000
Remember that first argument is the context

187
00:09:30,000 --> 00:09:34,000
of the object which will be bound to this inside of our call. 

188
00:09:34,000 --> 00:09:38,000
So after that, we can now list our arguments right after that. 

189
00:09:38,000 --> 00:09:41,000
So we could say, &quot;Hello, Matt.&quot;

190
00:09:41,000 --> 00:09:43,000
and then pass in our next argument.

191
00:09:43,000 --> 00:09:47,000
We'll say &quot;I'm in a bad mood.&quot; 

192
00:09:47,000 --> 00:09:50,000
So we'll refresh, and we'll see that says,

193
00:09:50,000 --> 00:09:54,000
&quot;Hello, Matt. I am Amit, and I am in a bad mood.&quot; 

194
00:09:54,000 --> 00:09:56,000
I don't know why Amit would be in a bad mood around Matt, 

195
00:09:56,000 --> 00:09:59,000
but that's beside the point. 

196
00:09:59,000 --> 00:10:03,000
How apply is different is instead of passing in our individual arguments,

197
00:10:03,000 --> 00:10:07,000
like Matt and bad, 

198
00:10:07,000 --> 00:10:11,000
we instead pass all of the arguments in as a array. 

199
00:10:11,000 --> 00:10:16,000
So apply will--strictly speaking--only take two arguments, 

200
00:10:16,000 --> 00:10:21,000
the first being the context, and the second is an array of arguments. 

201
00:10:21,000 --> 00:10:24,000
So Matt will be passed to the first argument and bad to the second

202
00:10:24,000 --> 00:10:27,000
and so on and so forth. 

203
00:10:27,000 --> 00:10:30,000
So if we refresh, you can see the same thing works here. 

204
00:10:30,000 --> 00:10:34,000
And that's the only way call and apply differ from each other

205
00:10:34,000 --> 00:10:38,000
in that call will take any variable number of arguments,

206
00:10:38,000 --> 00:10:40,000
where the first one will be the context

207
00:10:40,000 --> 00:10:43,000
and the rest of the arguments will be the

208
00:10:43,000 --> 00:10:46,000
rest of the normal arguments of that function. 

209
00:10:46,000 --> 00:10:49,000
However, apply first takes the context object

210
00:10:49,000 --> 00:10:53,000
and then takes a single array containing zero or more arguments

211
00:10:53,000 --> 00:10:55,000
to be passed in. 

212
00:10:55,000 --> 00:10:58,000
Now this might seem like an arbitrary distinction; 

213
00:10:58,000 --> 00:11:01,000
however, apply being used this way provides us 

214
00:11:01,000 --> 00:11:06,000
a really, really useful way to dynamically call functions.

215
00:11:06,000 --> 00:11:09,000
For instance, if we wanted to call a function with a set of arguments

216
00:11:09,000 --> 00:11:12,000
and we don't know how long those are, 

217
00:11:12,000 --> 00:11:15,000
the obvious thing to do is anytime we have some variable number of arguments

218
00:11:15,000 --> 00:11:18,000
is to put them in array. 

219
00:11:18,000 --> 00:11:28,000
So we can say our args equals Michael, and let's say happy. 

220
00:11:28,000 --> 00:11:31,000
Even if we tried to call jim.greet, 

221
00:11:31,000 --> 00:11:35,000
there's no way for us to easily 

222
00:11:35,000 --> 00:11:38,000
just pass in those args like this. 

223
00:11:38,000 --> 00:11:41,000
If we did it like that, then our args

224
00:11:41,000 --> 00:11:45,000
array would be bound to name, here. 

225
00:11:45,000 --> 00:11:48,000
And there's no real way to explode that out. 

226
00:11:48,000 --> 00:11:51,000
Instead what we normally do when we have

227
00:11:51,000 --> 00:11:54,000
a list of arguments stored stored in array, 

228
00:11:54,000 --> 00:11:57,000
is call jim.greet.apply,

229
00:11:57,000 --> 00:11:59,000
and even though we have jim.greet here, 

230
00:11:59,000 --> 00:12:01,000
we still have to pass in the context,

231
00:12:01,000 --> 00:12:05,000
so we'd have to say Jim and then args,

232
00:12:05,000 --> 00:12:07,000
and it works. 

233
00:12:07,000 --> 00:12:09,000
Now, you'll recognize this when it comes to it. 

234
00:12:09,000 --> 00:12:12,000
It doesn't come up all the time, but sometimes you just end up

235
00:12:12,000 --> 00:12:17,000
with an array of arguments, and you don't know how many items are in that array,

236
00:12:17,000 --> 00:12:20,000
so you can't statically break out those arguments

237
00:12:20,000 --> 00:12:22,000
in our code. 

238
00:12:22,000 --> 00:12:24,000
Instead, we have to dynamically do it, 

239
00:12:24,000 --> 00:12:26,000
and apply offers us a great tool to do that, 

240
00:12:26,000 --> 00:12:29,000
since it will take an array, which is variable, 

241
00:12:29,000 --> 00:12:32,000
and apply it to the function, 

242
00:12:32,000 --> 00:12:35,000
setting the parameters as needed. 

243
00:12:35,000 --> 00:12:38,000
So now we've seen how methods work,

244
00:12:38,000 --> 00:12:41,000
but we're having a lot of duplication of our data between objects.

245
00:12:41,000 --> 00:12:44,000
In the next video, we'll learn how to use prototypes to clean that up. 

246
00:12:44,000 --> 00:12:47,000
[Treehouse]

