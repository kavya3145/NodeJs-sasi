1
00:00:00,000 --> 00:00:07,000
[Treehouse]

2
00:00:08,000 --> 00:00:11,000
So far we've seen how to create strings using string literals.

3
00:00:11,000 --> 00:00:15,000
Now we'll see how to create strings by joining other strings together.

4
00:00:15,000 --> 00:00:18,000
The first common thing that you'll do with strings 

5
00:00:18,000 --> 00:00:23,000
is concatenate them with other strings. That means to join them together.

6
00:00:23,000 --> 00:00:29,000
For instance, if we had a variable called &quot;part1,&quot; 

7
00:00:29,000 --> 00:00:34,000
and the string was &quot;Hello&quot; with a space after it.

8
00:00:34,000 --> 00:00:43,000
Then if we add another variable called &quot;part2&quot; with a value &quot;World!&quot;,

9
00:00:43,000 --> 00:00:50,000
we could create another string that is the joining of these two by using the plus operator.

10
00:00:50,000 --> 00:00:54,000
We'll store this into a variable called &quot;whole,&quot; 

11
00:00:54,000 --> 00:01:02,000
which will be part1 plus part2.

12
00:01:02,000 --> 00:01:11,000
We can do console.log(whole), save it, and refresh it, 

13
00:01:11,000 --> 00:01:15,000
and we can see now &quot;whole&quot; contains the string &quot;Hello World!&quot;

14
00:01:15,000 --> 00:01:19,000
You can concatenate string literals themselves instead of just variables.

15
00:01:19,000 --> 00:01:27,000
For instance, if we replaced part1 with &quot;Hello&quot; and part2 with the literal string &quot;World!&quot;

16
00:01:27,000 --> 00:01:33,000
the same effect will happen where whole is &quot;Hello World!&quot;

17
00:01:33,000 --> 00:01:38,000
We can save and refresh our browser and see that it is the same.

18
00:01:38,000 --> 00:01:43,000
I'm going to change it back to being our variables here.

19
00:01:43,000 --> 00:01:47,000
Now we can concatenate anywhere that we have a string.

20
00:01:47,000 --> 00:01:51,000
For instance, if we wanted to add on to whole here, you do whole +

21
00:01:51,000 --> 00:01:55,000
 and we'll add some extra exclamation points.

22
00:01:55,000 --> 00:02:00,000
If we refresh, we'll see that the string is now concatenated.

23
00:02:00,000 --> 00:02:04,000
We can use it as as many plus operators to concatenate as many strings together

24
00:02:04,000 --> 00:02:06,000
as we would like.

25
00:02:06,000 --> 00:02:11,000
Now we can use the concatenation operator also to make our code a little easier to read. 

26
00:02:11,000 --> 00:02:15,000
For instance, let's take a look at our multi-line string.

27
00:02:15,000 --> 00:02:21,000
Here by reading it, we can see that there are two new line characters, which make it a 3-line string.

28
00:02:21,000 --> 00:02:26,000
However, the literal in our code is all done in one line.

29
00:02:26,000 --> 00:02:30,000
Ideally, it would be nice if we could split it onto multiple lines,

30
00:02:30,000 --> 00:02:35,000
but we remember that we cannot split a literal string onto multiple lines in JavaScript,

31
00:02:35,000 --> 00:02:41,000
but we can, however, create multiple strings, place them on different lines,

32
00:02:41,000 --> 00:02:44,000
and concatenate them together with the plus operate.

33
00:02:44,000 --> 00:02:48,000
For instance, we can do something like this.

34
00:02:48,000 --> 00:02:56,000
We'll end our first string right after our new line character by adding a double quote.

35
00:02:56,000 --> 00:03:02,000
Then we'll use the plus operator to say we're going to concatenate another string onto this string.

36
00:03:02,000 --> 00:03:05,000
We'll add another quotation mark, another plus to concatenate,

37
00:03:05,000 --> 00:03:10,000
 and we'll create the last string by adding another quote. 

38
00:03:10,000 --> 00:03:15,000
Now this in itself should not have changed the value of our multi-line string.

39
00:03:15,000 --> 00:03:19,000
We can find out by saving it and refreshing in our browser,

40
00:03:19,000 --> 00:03:25,000
and we still see this is line 1, this is line 2, and this tab is line 3, 

41
00:03:25,000 --> 00:03:30,000
but that advantage we now have is we're actually able to split this onto multiple lines.

42
00:03:30,000 --> 00:03:36,000
For instance, we we could do a new line right after the plus

43
00:03:36,000 --> 00:03:40,000
and we can arrange it however we like.

44
00:03:40,000 --> 00:03:43,000
We have to remember to have the plus on the end of the line.

45
00:03:43,000 --> 00:03:46,000
This is because when JavaScript sees a plus, it knows that there 

46
00:03:46,000 --> 00:03:49,000
should be something on the right-hand side.

47
00:03:49,000 --> 00:03:54,000
It'll search for the second operand by doing down to the next line where it finds line two

48
00:03:54,000 --> 00:03:59,000
 and again finds like 3 for the final concatenation.

49
00:03:59,000 --> 00:04:07,000
If we save this out and we refresh our browser, we see that the result is the same.

50
00:04:07,000 --> 00:04:11,000
Now, it may not be the prettiest way to create a multi-line string,

51
00:04:11,000 --> 00:04:14,000
but in JavaScript it's pretty much our only option.

52
00:04:14,000 --> 00:04:19,000
We can either have all of our string on a single string literal on one line,

53
00:04:19,000 --> 00:04:25,000
or we can split it into multiple substrings and add our new lines by using \n

54
00:04:25,000 --> 00:04:29,000
and concatenating them together using the plus operator. 

55
00:04:29,000 --> 00:04:33,000
Up next, we'll learn about some of the properties and methods of strings.

56
00:04:33,000 --> 00:04:36,000
[Treehouse]

