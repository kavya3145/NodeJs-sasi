1
00:00:00,000 --> 00:00:07,000
[? Music ?] [Treehouse] 

2
00:00:09,000 --> 00:00:11,000
Strings in JavaScript can be compared,

3
00:00:11,000 --> 00:00:13,000
meaning we can tell if 1 string is less than, 

4
00:00:13,000 --> 00:00:16,000
greater than, or equal to another string.

5
00:00:16,000 --> 00:00:18,000
Let's see how that works.

6
00:00:18,000 --> 00:00:20,000
Now that we've seen how to create and get the properties of strings,

7
00:00:20,000 --> 00:00:24,000
there's one more thing that we'll generally do with strings very often,

8
00:00:24,000 --> 00:00:26,000
and that is compare them.

9
00:00:26,000 --> 00:00:29,000
When we compare 2 strings, what we're asking is

10
00:00:29,000 --> 00:00:32,000
whether the 2 strings are equal or whether 1 string

11
00:00:32,000 --> 00:00:36,000
has a greater value than another string.

12
00:00:36,000 --> 00:00:39,000
Let's begin with testing for equality strings.

13
00:00:39,000 --> 00:00:42,000
I've commented out our previous code so we have fewer 

14
00:00:42,000 --> 00:00:47,000
console.logs to sift through while we're experimenting with JavaScript strings.

15
00:00:47,000 --> 00:00:49,000
In order to test the equality of 2 strings,

16
00:00:49,000 --> 00:00:52,000
first we need to have 2 strings, and then we're going to use

17
00:00:52,000 --> 00:00:55,000
the equals operator.

18
00:00:55,000 --> 00:00:57,000
Let's grab 2 strings.

19
00:00:57,000 --> 00:01:01,000
Let's grab our first string,

20
00:01:01,000 --> 00:01:06,000
and we'll say &quot;Hello.&quot;

21
00:01:06,000 --> 00:01:11,000
And our second string we'll do a lowercase &quot;hello.&quot;

22
00:01:11,000 --> 00:01:15,000
And the way we can test for equality is simply by doing this.

23
00:01:15,000 --> 00:01:20,000
We're going to do it in the context of an if statement,

24
00:01:20,000 --> 00:01:28,000
so we'll say &quot;if (first === second).&quot;

25
00:01:28,000 --> 00:01:31,000
The 3 equals here means is equal to.

26
00:01:31,000 --> 00:01:36,000
And more specifically, it means is strictly equal to.

27
00:01:36,000 --> 00:01:40,000
There is another similar operator in JavaScript which is 2 equals signs.

28
00:01:40,000 --> 00:01:44,000
The difference between 2 equals signs and 3 equals signs

29
00:01:44,000 --> 00:01:47,000
is that when you use only 2 equals signs

30
00:01:47,000 --> 00:01:52,000
JavaScript will sometimes change the type of one of the operands 

31
00:01:52,000 --> 00:01:56,000
if it will allow it to match the other operand.

32
00:01:56,000 --> 00:01:59,000
For instance, you might be able to compare a string 

33
00:01:59,000 --> 00:02:03,000
with the number 13 in it to the actual number 13

34
00:02:03,000 --> 00:02:06,000
and the double equals would return true,

35
00:02:06,000 --> 00:02:11,000
but the triple equals will only return true if both sides are strings

36
00:02:11,000 --> 00:02:13,000
and they are equivalent strings.

37
00:02:13,000 --> 00:02:18,000
So, we're going to use 3 equals signs whenever we want to do this.

38
00:02:18,000 --> 00:02:21,000
This will help reduce errors in our JavaScript programs.

39
00:02:21,000 --> 00:02:33,000
In our if statement, we'll say console.log(&quot;The strings are equal&quot;).

40
00:02:33,000 --> 00:02:36,000
 And we'll put an else clause here,

41
00:02:36,000 --> 00:02:47,000
and we'll say console.log(&quot;The strings are different&quot;).

42
00:02:47,000 --> 00:02:51,000
Right now we're comparing first, which is the string &quot;Hello&quot; with a capital H

43
00:02:51,000 --> 00:02:55,000
to second, which is &quot;hello&quot; with a lowercase H.

44
00:02:55,000 --> 00:02:57,000
So what is the expected result?

45
00:02:57,000 --> 00:02:59,000
Well, let's save this out,

46
00:02:59,000 --> 00:03:03,000
return to our browser, and we'll refresh.

47
00:03:03,000 --> 00:03:06,000
And we'll see that the strings are different,

48
00:03:06,000 --> 00:03:09,000
and that's because first and second are 2 different strings

49
00:03:09,000 --> 00:03:14,000
because first has a capital H, and second has a lowercase h.

50
00:03:14,000 --> 00:03:20,000
The equality operator takes into account the differences in case in the letters.

51
00:03:20,000 --> 00:03:23,000
They'll only be equal if they are the exact same letters

52
00:03:23,000 --> 00:03:25,000
in the same case.

53
00:03:25,000 --> 00:03:28,000
Sometimes we want to compare strings without being sensitive

54
00:03:28,000 --> 00:03:30,000
to the case.

55
00:03:30,000 --> 00:03:34,000
The best way to handle this is to use the methods that we saw earlier,

56
00:03:34,000 --> 00:03:38,000
either 2 uppercase or 2 lowercase.

57
00:03:38,000 --> 00:03:41,000
Generally, 2 lowercase is used in this use case,

58
00:03:41,000 --> 00:03:43,000
so let's try this out.

59
00:03:43,000 --> 00:03:46,000
What we'll do is we'll take our first string 

60
00:03:46,000 --> 00:03:53,000
and call the 2 lowercase method.

61
00:03:53,000 --> 00:03:55,000
And now the left-hand side will be whatever the first string was

62
00:03:55,000 --> 00:03:57,000
but all lowercase.

63
00:03:57,000 --> 00:03:59,000
And to be safe, we'll do the other side as well

64
00:03:59,000 --> 00:04:03,000
to lowercase. 

65
00:04:03,000 --> 00:04:06,000
And now what we have is a comparison of the strings

66
00:04:06,000 --> 00:04:11,000
that is insensitive to the case of the letters inside of those strings.

67
00:04:11,000 --> 00:04:14,000
If we save that out and refresh,

68
00:04:14,000 --> 00:04:17,000
we see now that the strings are equal.

69
00:04:17,000 --> 00:04:19,000
Any time that you want to do a string comparison

70
00:04:19,000 --> 00:04:22,000
that is insensitive to case, the easiest way 

71
00:04:22,000 --> 00:04:26,000
is to lowercase both of the strings you are comparing.

72
00:04:26,000 --> 00:04:30,000
Now besides the equality operator, there are 4 other comparisons

73
00:04:30,000 --> 00:04:32,000
we can use between the strings.

74
00:04:32,000 --> 00:04:36,000
This includes less than, greater than,

75
00:04:36,000 --> 00:04:40,000
less than or equal to, and greater than or equal to.

76
00:04:40,000 --> 00:04:43,000
The difference between less than and less than or equal to

77
00:04:43,000 --> 00:04:47,000
is that less than will only return true if the left-hand side

78
00:04:47,000 --> 00:04:50,000
is less than the right-hand side.

79
00:04:50,000 --> 00:04:52,000
However, less than or equal to will return true

80
00:04:52,000 --> 00:04:56,000
if the left-hand side is less than the right-hand side

81
00:04:56,000 --> 00:04:59,000
or if the 2 sides are equal.

82
00:04:59,000 --> 00:05:02,000
Let's just focus on less than right now because 

83
00:05:02,000 --> 00:05:05,000
less than is the opposite of greater than, and it's pretty easy

84
00:05:05,000 --> 00:05:09,000
to understand how the JavaScript strings will be evaluated

85
00:05:09,000 --> 00:05:12,000
once you understand less than.

86
00:05:12,000 --> 00:05:15,000
What I've done here is I've created a function called &quot;compare.&quot;

87
00:05:15,000 --> 00:05:18,000
And this is just to help us experiment

88
00:05:18,000 --> 00:05:22,000
with the different ways strings will compare to each other.

89
00:05:22,000 --> 00:05:26,000
It simply takes 2 strings and it will console.log

90
00:05:26,000 --> 00:05:29,000
both the message describing those strings

91
00:05:29,000 --> 00:05:32,000
with the less than between them, and the second argument is

92
00:05:32,000 --> 00:05:36,000
the actual comparison of a is less than b.

93
00:05:36,000 --> 00:05:38,000
Let's try out a few strings.

94
00:05:38,000 --> 00:05:42,000
We'll use the compare function we just created,

95
00:05:42,000 --> 00:05:46,000
and let's compare the string &quot;a&quot;

96
00:05:46,000 --> 00:05:49,000
to the string &quot;b.&quot;

97
00:05:49,000 --> 00:05:54,000
Now this will print out true if the string &quot;a&quot; is in fact less than the string &quot;b,&quot;

98
00:05:54,000 --> 00:05:58,000
and based on the alphabetical order, we would expect that to be true,

99
00:05:58,000 --> 00:06:01,000
so let's try it out.

100
00:06:01,000 --> 00:06:05,000
If we refresh, &quot;a&quot; is less than &quot;b&quot; is true.

101
00:06:05,000 --> 00:06:08,000
What would happen if we took a lowercase a

102
00:06:08,000 --> 00:06:15,000
and compared it to an uppercase A?

103
00:06:15,000 --> 00:06:17,000
Let's check it out in the browser.

104
00:06:17,000 --> 00:06:22,000
And we'll see lowercase a less than uppercase A is false.

105
00:06:22,000 --> 00:06:25,000
And that's because of the way strings are encoded

106
00:06:25,000 --> 00:06:27,000
and compared.

107
00:06:27,000 --> 00:06:30,000
Any uppercase letter is always going to be

108
00:06:30,000 --> 00:06:33,000
less than any lowercase letter.

109
00:06:33,000 --> 00:06:36,000
That's because the characters that we use in our string 

110
00:06:36,000 --> 00:06:39,000
are roughly based on the ASCII table.

111
00:06:39,000 --> 00:06:42,000
This ASCII table assigns each character that could be in our string 

112
00:06:42,000 --> 00:06:46,000
a value, and when we compare strings,

113
00:06:46,000 --> 00:06:50,000
it uses the values of each of those characters to compare them.

114
00:06:50,000 --> 00:06:55,000
If we were to look inside of this table for the lowercase a,

115
00:06:55,000 --> 00:06:59,000
we'll see its decimal value is equivalent to 97

116
00:06:59,000 --> 00:07:04,000
where the uppercase A is equivalent to the decimal value 65.

117
00:07:04,000 --> 00:07:08,000
That's why a lowercase a would actually be greater

118
00:07:08,000 --> 00:07:10,000
than an uppercase A.

119
00:07:10,000 --> 00:07:15,000
And this type of comparison will work for all the characters that we see here.

120
00:07:15,000 --> 00:07:18,000
For instance, an open square bracket would be less than

121
00:07:18,000 --> 00:07:21,000
a closing square bracket.

122
00:07:21,000 --> 00:07:23,000
We can compare more than single characters.

123
00:07:23,000 --> 00:07:33,000
We can compare longer strings like &quot;compare('apples', 'oranges')&quot;

124
00:07:33,000 --> 00:07:36,000
and the way the comparison will be created is JavaScript 

125
00:07:36,000 --> 00:07:38,000
will look at the first character in each string.

126
00:07:38,000 --> 00:07:41,000
If the first character of the left-hand side is less than the

127
00:07:41,000 --> 00:07:45,000
first character of the right-hand side, then less than is true.

128
00:07:45,000 --> 00:07:48,000
It only needs to go to the subsequent letters

129
00:07:48,000 --> 00:07:52,000
if the letters it has looked at so far are equivalent.

130
00:07:52,000 --> 00:08:01,000
For example, comparing apples to applications.

131
00:08:01,000 --> 00:08:04,000
What will determine which is greater or which is less than

132
00:08:04,000 --> 00:08:09,000
will actually be the &quot;e&quot; in apples and the &quot;i&quot; in applications.

133
00:08:09,000 --> 00:08:12,000
And we can see what the results will be here.

134
00:08:12,000 --> 00:08:15,000
Both of them, apples comes before applications

135
00:08:15,000 --> 00:08:19,000
because in apples versus oranges, a comes before o, 

136
00:08:19,000 --> 00:08:25,000
and in apples versus applications, e comes before i.

137
00:08:25,000 --> 00:08:30,000
Now what happens if one string is a substring of the other?

138
00:08:30,000 --> 00:08:40,000
For instance, if we compare app to apples.

139
00:08:40,000 --> 00:08:44,000
We can see that the comparison will go through a, p and p.

140
00:08:44,000 --> 00:08:47,000
However, the left-hand side runs out of letters,

141
00:08:47,000 --> 00:08:50,000
meaning that the left-hand side is smaller

142
00:08:50,000 --> 00:08:54,000
than the right-hand side.

143
00:08:54,000 --> 00:08:58,000
Finally, if we do compare 2 of the same strings

144
00:08:58,000 --> 00:09:03,000
like &quot;hello&quot; and &quot;hello,&quot;

145
00:09:03,000 --> 00:09:10,000
we'll see once again that hello is not less than hello because they are equal.

146
00:09:10,000 --> 00:09:13,000
However, if we modified our compare function and set it to use less than

147
00:09:13,000 --> 00:09:18,000
or equal to, both in our description and our actual comparison,

148
00:09:18,000 --> 00:09:22,000
we'll see that hello is less than or equal to hello because 

149
00:09:22,000 --> 00:09:26,000
hello and hello are equal, and that is the only way that less than

150
00:09:26,000 --> 00:09:29,000
and less than or equal to  are different.

151
00:09:29,000 --> 00:09:32,000
Conversely, greater than and greater than or equal to will work the same way

152
00:09:32,000 --> 00:09:37,000
as we've seen only in the reverse order.

153
00:09:37,000 --> 00:09:40,000
Now you should be familiar with strings in JavaScript.

154
00:09:40,000 --> 00:09:42,000
There is still more to learn, but we'll be seeing more about strings

155
00:09:42,000 --> 00:09:46,000
as we learn about the other types in JavaScript.

156
00:09:46,000 --> 00:09:48,000
[? Music ?] [Treehouse] 

