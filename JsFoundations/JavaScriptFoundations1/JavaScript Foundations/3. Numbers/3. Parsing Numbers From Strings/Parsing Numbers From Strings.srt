1
00:00:00,000 --> 00:00:07,000
[? Music ?] [Treehouse] 

2
00:00:08,000 --> 00:00:11,000
In JavaScript, we can actually extract numbers out of strings

3
00:00:11,000 --> 00:00:13,000
that have numeric characters in them.

4
00:00:13,000 --> 00:00:15,000
Let's see how that works.

5
00:00:15,000 --> 00:00:17,000
So far every time we've created a number, 

6
00:00:17,000 --> 00:00:20,000
we've used what we call a literal notation,

7
00:00:20,000 --> 00:00:25,000
meaning that in our JavaScript code, our numbers are literally represented as code.

8
00:00:25,000 --> 00:00:30,000
However, sometimes we may want to get numbers out of, perhaps, a string.

9
00:00:30,000 --> 00:00:36,000
If we had a string with the value 197 in it,

10
00:00:36,000 --> 00:00:40,000
this doesn't do us much good for, let's say, arithmetic operations.

11
00:00:40,000 --> 00:00:44,000
We can't add other numbers to it because it's a string,

12
00:00:44,000 --> 00:00:48,000
so how do we get a real number out of a string?

13
00:00:48,000 --> 00:00:51,000
Well, one method we could do if we want a whole number

14
00:00:51,000 --> 00:00:54,000
is to use a method called &quot;parseInt,&quot;

15
00:00:54,000 --> 00:00:57,000
and this is a built-in function to JavaScript,

16
00:00:57,000 --> 00:01:01,000
so the way we use it is to type in &quot;parse,&quot; all lowercase, with a capital &quot;I,&quot;

17
00:01:01,000 --> 00:01:08,000
&quot;nt,&quot; and then we open up parentheses, placing the number inside.

18
00:01:08,000 --> 00:01:13,000
Now, this is the easiest way to do this, and the &quot;Int&quot; stands for integer.

19
00:01:13,000 --> 00:01:17,000
Remember earlier I was talking about the difference between integers and floats.

20
00:01:17,000 --> 00:01:20,000
However, remember that numbers don't have this distinction

21
00:01:20,000 --> 00:01:22,000
when they're represented in JavaScript.

22
00:01:22,000 --> 00:01:26,000
However, there are 2 different functions, parseInt and parseFloat,

23
00:01:26,000 --> 00:01:28,000
which will return  you either a whole number

24
00:01:28,000 --> 00:01:32,000
or the number with the included floating point precision.

25
00:01:32,000 --> 00:01:34,000
This is just a convenience because usually you either want to

26
00:01:34,000 --> 00:01:39,000
pull out a whole number or the whole floating point number out of a string.

27
00:01:39,000 --> 00:01:43,000
Let's just focus on pulling a whole number or an integer out of a string.

28
00:01:43,000 --> 00:01:48,000
If we take our j, I have &quot;parseInt(&quot;197&quot;),&quot;

29
00:01:48,000 --> 00:01:54,000
and we refresh our browser, type in &quot;j,&quot; and we get 197, the number, not the string.

30
00:01:54,000 --> 00:01:58,000
We could do &quot;j + 2,&quot; and we get 199.

31
00:01:58,000 --> 00:02:01,000
This is how we can get a number out of a string.

32
00:02:01,000 --> 00:02:06,000
Now what would happen if our number was something like 012?

33
00:02:06,000 --> 00:02:08,000
We saw what happened when this was a literal,

34
00:02:08,000 --> 00:02:11,000
but let's see what happens in parseInt.

35
00:02:11,000 --> 00:02:16,000
If we refresh, type in &quot;j,&quot; we get the actual number 10.

36
00:02:16,000 --> 00:02:19,000
Now, again, this may seem confusing because 

37
00:02:19,000 --> 00:02:24,000
we think it would be 12, but remember, the leading 0 represents it as an octal form.

38
00:02:24,000 --> 00:02:27,000
Now what would happen if we type in &quot;019?&quot;

39
00:02:27,000 --> 00:02:30,000
Well, it kind of depends. Let's check it out.

40
00:02:30,000 --> 00:02:34,000
We get the number 1, so we get some strange behavior.

41
00:02:34,000 --> 00:02:38,000
To solve this problem, if we know that our representation is a decimal representation,

42
00:02:38,000 --> 00:02:43,000
we want to add a second argument to parseInt, which is the radix,

43
00:02:43,000 --> 00:02:48,000
which is the base of the number system we want to parse.

44
00:02:48,000 --> 00:02:50,000
Normally we want to parse the decimal,

45
00:02:50,000 --> 00:02:53,000
so our second argument would be 10, meaning that our number

46
00:02:53,000 --> 00:02:59,000
is base 10, so 019 should be the number 19.

47
00:02:59,000 --> 00:03:05,000
If we refresh, type in &quot;j,&quot; now we should see that it's the number 19.

48
00:03:05,000 --> 00:03:07,000
Now, this is something that you'll learn after making this mistake 

49
00:03:07,000 --> 00:03:09,000
a lot of times in JavaScript.

50
00:03:09,000 --> 00:03:11,000
Here's the lesson.

51
00:03:11,000 --> 00:03:15,000
Any time you use parseInt to get a number out of a string,

52
00:03:15,000 --> 00:03:19,000
you really want to add the second argument of 10 

53
00:03:19,000 --> 00:03:21,000
unless you're specifically working in a different base

54
00:03:21,000 --> 00:03:25,000
because you may not know what the actual string representation of a number is

55
00:03:25,000 --> 00:03:30,000
because it may be stored in a variable, or it may come from a user or another situation.

56
00:03:30,000 --> 00:03:34,000
You don't know if it will have the weird properties, for instance, leading with a 0.

57
00:03:34,000 --> 00:03:37,000
By adding the second argument of base 10,

58
00:03:37,000 --> 00:03:40,000
you're assured that any time it parses an integer

59
00:03:40,000 --> 00:03:44,000
it will always be done in base 10, and then the format of the actual 

60
00:03:44,000 --> 00:03:46,000
number in the string won't matter.

61
00:03:46,000 --> 00:03:48,000
It won't change the base that it's parsed.

62
00:03:48,000 --> 00:03:53,000
To make this even more confusing, if we just did parseInt 012,

63
00:03:53,000 --> 00:03:57,000
in some implementations it will represent it as an octal,

64
00:03:57,000 --> 00:03:59,000
and its sum a decimal.

65
00:03:59,000 --> 00:04:03,000
Even though you can get away with not putting the second argument parseInt in,

66
00:04:03,000 --> 00:04:06,000
you always want to because you're being very specific about 

67
00:04:06,000 --> 00:04:09,000
what type of number you're parsing out of your string,

68
00:04:09,000 --> 00:04:14,000
so just always use &quot;,10&quot; when parsing an integer out of a string.

69
00:04:14,000 --> 00:04:21,000
Now we could use parseInt and the radix operator to do some other interesting things.

70
00:04:21,000 --> 00:04:26,000
For instance, if we wanted to parse binary out of it,

71
00:04:26,000 --> 00:04:29,000
we could use the base 2 as a binary operator,

72
00:04:29,000 --> 00:04:34,000
which means the only digits we could use in our string are 0 and 1,

73
00:04:34,000 --> 00:04:37,000
and if you had a binary string of some sort, for instance, 0s and 1s,

74
00:04:37,000 --> 00:04:42,000
and let's change this to k, and if we refresh and type in &quot;k,&quot;

75
00:04:42,000 --> 00:04:49,000
we'll see that the 010111 representation in base 2 is the number 23.

76
00:04:49,000 --> 00:04:53,000
So this radix argument is an arbitrary number,

77
00:04:53,000 --> 00:04:57,000
so we could do 3, and that will change what k is.

78
00:04:57,000 --> 00:05:00,000
Very rarely do you work in a base 3 number system,

79
00:05:00,000 --> 00:05:06,000
but you can change it to 8 for octal and get the correct numbers.

80
00:05:06,000 --> 00:05:10,000
But most of the time you're going to want your radix operator to be 10,

81
00:05:10,000 --> 00:05:17,000
so what happens if we do parseInt with some non-digits in it?

82
00:05:17,000 --> 00:05:21,000
Let's say we do 23 people,

83
00:05:21,000 --> 00:05:26,000
and remember, any time we do a parseInt, you always want to add a radix here of 10.

84
00:05:26,000 --> 00:05:30,000
If we refresh and take a look at l, we'll see it's 23.

85
00:05:30,000 --> 00:05:33,000
It parsed it out pretty well, however, what if we did 

86
00:05:33,000 --> 00:05:38,000
&quot;there are 23 people?&quot;

87
00:05:38,000 --> 00:05:40,000
And we refresh.

88
00:05:40,000 --> 00:05:46,000
We get an interesting value called &quot;NaN,&quot; and NaN stands for &quot;not a number.&quot;

89
00:05:46,000 --> 00:05:50,000
And this is a value that's used in JavaScript to represent a value

90
00:05:50,000 --> 00:05:52,000
that is not a number.

91
00:05:52,000 --> 00:05:54,000
Now NaN has some interesting properties.

92
00:05:54,000 --> 00:05:57,000
If you, for instance, try to add a number to NaN,

93
00:05:57,000 --> 00:05:59,000
so we'll take l, which is not a number,

94
00:05:59,000 --> 00:06:03,000
 and add 14 to it, we get not a number.

95
00:06:03,000 --> 00:06:06,000
In fact, if we do any type of operation to not a number,

96
00:06:06,000 --> 00:06:09,000
the result is always not a number.

97
00:06:09,000 --> 00:06:12,000
If at any point in time you do an operation like parseInt 

98
00:06:12,000 --> 00:06:14,000
that could return not a number,

99
00:06:14,000 --> 00:06:18,000
you want to check for it because any operations that you do after that

100
00:06:18,000 --> 00:06:22,000
will result in those results being not a number all the way up.

101
00:06:22,000 --> 00:06:26,000
You may see NaN show up in your JavaScripts when you don't expect it.

102
00:06:26,000 --> 00:06:29,000
That means at some point, not a number showed up.

103
00:06:29,000 --> 00:06:34,000
So how do we check for not a number?

104
00:06:34,000 --> 00:06:37,000
We know l is going to be not a number,

105
00:06:37,000 --> 00:06:41,000
so you might think we could do &quot;===  NaN.&quot;

106
00:06:41,000 --> 00:06:45,000
See, it highlights because not a number is something that we can use as a literal,

107
00:06:45,000 --> 00:06:47,000
but what happens if we actually do this?

108
00:06:47,000 --> 00:06:49,000
And we refresh.

109
00:06:49,000 --> 00:06:51,000
We get false.

110
00:06:51,000 --> 00:06:55,000
But we know l is NaN, and for some reason

111
00:06:55,000 --> 00:06:59,000
if we compare the two of them, we get false.

112
00:06:59,000 --> 00:07:03,000
Maybe it's because we're using our strict equality operator,

113
00:07:03,000 --> 00:07:05,000
but what if we just try 2 equals?

114
00:07:05,000 --> 00:07:07,000
Well, we get false again,

115
00:07:07,000 --> 00:07:10,000
and that's because not a number has a curious property

116
00:07:10,000 --> 00:07:12,000
of not being equal to itself,

117
00:07:12,000 --> 00:07:18,000
so we can see that even comparing

118
00:07:18,000 --> 00:07:22,000
the JavaScript variable l to itself returns false.

119
00:07:22,000 --> 00:07:25,000
You may be tempted to use that to detect not a number,

120
00:07:25,000 --> 00:07:31,000
but what you want to do is use a function that's built into JavaScript called isNaN.

121
00:07:31,000 --> 00:07:37,000
The way we do that is type in &quot;isNaN.&quot;

122
00:07:37,000 --> 00:07:41,000
And this takes a parameter, and if we pass an l, which is not a number,

123
00:07:41,000 --> 00:07:45,000
we'll see it's true, so NaN is a very weird value

124
00:07:45,000 --> 00:07:48,000
because it doesn't equal itself or any other number

125
00:07:48,000 --> 00:07:56,000
and has a special function for testing if it is itself.

126
00:07:56,000 --> 00:07:58,000
And the last function I want to talk about here is called parseFloat,

127
00:07:58,000 --> 00:08:02,000
and it acts very similar to parseInt, 

128
00:08:02,000 --> 00:08:12,000
and we'll say &quot;parseFloat(&quot;123.456&quot;).&quot;

129
00:08:12,000 --> 00:08:18,000
And now the number m will be 123.456,

130
00:08:18,000 --> 00:08:23,000
and this has the same properties, so if we have stuff after the number,

131
00:08:23,000 --> 00:08:28,000
like &quot;is a strange number,&quot;

132
00:08:28,000 --> 00:08:30,000
we can see that m still works.

133
00:08:30,000 --> 00:08:38,000
However, if we lead with some other stuff, &quot;this number,&quot;

134
00:08:38,000 --> 00:08:42,000
we'll see that, again, parseFloat returns not a number.

135
00:08:42,000 --> 00:08:46,000
For parseInt and for parseFloat to work, it must start with a number,

136
00:08:46,000 --> 00:08:48,000
and then anything after the number really won't affect it

137
00:08:48,000 --> 00:08:53,000
so long as your string starts with something that could be parsed as a number.

138
00:08:53,000 --> 00:08:56,000
With parseFloat, we don't have to add the second argument of our radix

139
00:08:56,000 --> 00:08:59,000
because parseFloat will work in base 10

140
00:08:59,000 --> 00:09:04,000
really no matter what, so if we did this and checked our value of m,

141
00:09:04,000 --> 00:09:07,000
we still get 123.456.

142
00:09:07,000 --> 00:09:10,000
So parseInt and parseFloat are the 2 functions you would use

143
00:09:10,000 --> 00:09:13,000
to get  a number out of a string.

144
00:09:13,000 --> 00:09:15,000
So now we've seen the different ways we can create numbers

145
00:09:15,000 --> 00:09:17,000
or even parse them out of a string.

146
00:09:17,000 --> 00:09:19,000
Up next, we'll look at the mathematical operators we can use

147
00:09:19,000 --> 00:09:21,000
on our numbers.

148
00:09:21,000 --> 00:09:24,000
[? Music ?] [Treehouse] 

