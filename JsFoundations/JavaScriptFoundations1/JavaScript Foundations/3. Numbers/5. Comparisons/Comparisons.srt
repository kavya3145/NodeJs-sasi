1
00:00:00,000 --> 00:00:07,000
[? Music ?] [Treehouse] 

2
00:00:08,000 --> 00:00:11,000
Often in our program we need to compare 2 numbers against each other.

3
00:00:11,000 --> 00:00:14,000
Let's see how we do that in JavaScript.

4
00:00:14,000 --> 00:00:16,000
We've seen the various ways to create numbers

5
00:00:16,000 --> 00:00:20,000
as well as create other numbers by using mathematical operations

6
00:00:20,000 --> 00:00:24,000
like addition, subtraction, multiplication, division, and modulo. 

7
00:00:24,000 --> 00:00:26,000
And we saw how the order of operations works

8
00:00:26,000 --> 00:00:28,000
and how parentheses can be used to control

9
00:00:28,000 --> 00:00:31,000
the order of the operations in an expression.

10
00:00:31,000 --> 00:00:35,000
Now in strings, we saw that we could compare 2 strings together

11
00:00:35,000 --> 00:00:39,000
using less than, greater than, as well as less than or equal to, 

12
00:00:39,000 --> 00:00:43,000
greater than or equal to, and the equal to operator.

13
00:00:43,000 --> 00:00:48,000
And numbers, unsurprisingly, have the same type of comparison,

14
00:00:48,000 --> 00:00:52,000
so if we were to, for instance, check out console.log,

15
00:00:52,000 --> 00:00:57,000
and let's just take the expression 1 &lt; 2,

16
00:00:57,000 --> 00:01:00,000
we would expect this to return true

17
00:01:00,000 --> 00:01:03,000
because 1 is in fact less than 2.

18
00:01:03,000 --> 00:01:06,000
Now, we had another console.log up here, and I'm just going to

19
00:01:06,000 --> 00:01:10,000
comment it out so we only get 1 console here.

20
00:01:10,000 --> 00:01:13,000
We can see 1 &lt; 2 is our only console.log,

21
00:01:13,000 --> 00:01:17,000
so if we refresh, we see it's true.

22
00:01:17,000 --> 00:01:21,000
We also have the greater than operator, so this expression means

23
00:01:21,000 --> 00:01:26,000
1 &gt; 2, which is obviously false,

24
00:01:26,000 --> 00:01:30,000
and we have the greater than or equal to and less than or equal to operators,

25
00:01:30,000 --> 00:01:35,000
which are greater than then the equal operator.

26
00:01:35,000 --> 00:01:37,000
Now, is 1 greater than or equal to 2?

27
00:01:37,000 --> 00:01:39,000
If we refresh, we see false,

28
00:01:39,000 --> 00:01:43,000
but is 1 greater than or equal to 1?

29
00:01:43,000 --> 00:01:45,000
We see true.

30
00:01:45,000 --> 00:01:48,000
If we didn't have this equal sign here, and we said 1 is greater than 1,

31
00:01:48,000 --> 00:01:52,000
well, that's false, and this works in the other direction.

32
00:01:52,000 --> 00:01:55,000
We can say 1 is less than or equal to 1, 

33
00:01:55,000 --> 00:01:57,000
which would obviously be true.

34
00:01:57,000 --> 00:02:01,000
And 1 is less than 1 would be false,

35
00:02:01,000 --> 00:02:06,000
and this works even when our representations are slightly different.

36
00:02:06,000 --> 00:02:11,000
For instance, if we had 1.0 on one side and just 1 on the other,

37
00:02:11,000 --> 00:02:14,000
and we said less than or equal to, 

38
00:02:14,000 --> 00:02:18,000
well, 1 is equal to 1.0, so less than,

39
00:02:18,000 --> 00:02:21,000
greater than, as well as less than and equal to and greater than and equal to

40
00:02:21,000 --> 00:02:24,000
are pretty easy to use.

41
00:02:24,000 --> 00:02:26,000
We've seen the equality operator of 3 equal signs,

42
00:02:26,000 --> 00:02:30,000
so 1 is equal to 1.0.

43
00:02:30,000 --> 00:02:33,000
And we refresh. We see true.

44
00:02:33,000 --> 00:02:37,000
And one is equal to 1.5,

45
00:02:37,000 --> 00:02:40,000
of course, is false.

46
00:02:40,000 --> 00:02:44,000
You'll notice I'm using the triple equals operator, which we've seen before,

47
00:02:44,000 --> 00:02:48,000
and I explained that there's also a double equals operator.

48
00:02:48,000 --> 00:02:51,000
And the reason we don't use this is because if we compare

49
00:02:51,000 --> 00:02:54,000
a number to a string, we'll get some interesting results.

50
00:02:54,000 --> 00:02:59,000
For instance, if we checked the number 1 is equal to the string 1 

51
00:02:59,000 --> 00:03:03,000
with 2 equal operators, we'll see it's true.

52
00:03:03,000 --> 00:03:07,000
However, if we do 3 equals, we'll see that it's false,

53
00:03:07,000 --> 00:03:09,000
and this is because a triple equal operator

54
00:03:09,000 --> 00:03:11,000
will not just check that the values are the same

55
00:03:11,000 --> 00:03:13,000
but they are the same type.

56
00:03:13,000 --> 00:03:16,000
Now, the double equal operator has a lot of weird edge cases

57
00:03:16,000 --> 00:03:20,000
where it tries to convert numbers to strings or to other types

58
00:03:20,000 --> 00:03:23,000
where you may get some pretty unusual values when comparing 

59
00:03:23,000 --> 00:03:26,000
the equality of 2 different types of objects.

60
00:03:26,000 --> 00:03:28,000
That's why any time we're doing a comparison like this

61
00:03:28,000 --> 00:03:32,000
we want to use a triple equals operator and make sure

62
00:03:32,000 --> 00:03:34,000
we're working with the same types.

63
00:03:34,000 --> 00:03:38,000
In general practice, we don't want to compare a number to a string.

64
00:03:38,000 --> 00:03:43,000
Instead, we may want to do something like parseInt of that string.

65
00:03:43,000 --> 00:03:48,000
And remember to add our second argument 10 here so it's in base 10,

66
00:03:48,000 --> 00:03:51,000
and then we would get true.

67
00:03:51,000 --> 00:03:54,000
That way we're being very explicit about what we're checking against.

68
00:03:54,000 --> 00:03:58,000
Finally, the opposite of the triple equals operator 

69
00:03:58,000 --> 00:04:01,000
is the bang equals equals operator.

70
00:04:01,000 --> 00:04:05,000
This exclamation point, or bang, means not in JavaScript,

71
00:04:05,000 --> 00:04:09,000
which means 1 is not equal to 1 in this case,

72
00:04:09,000 --> 00:04:13,000
so does 1 not equal 1?

73
00:04:13,000 --> 00:04:17,000
No, so that would be false.

74
00:04:17,000 --> 00:04:22,000
So, for instance, if we checked 1 is not equal to 3,

75
00:04:22,000 --> 00:04:24,000
this would be true.

76
00:04:24,000 --> 00:04:27,000
Again, if we just used an exclamation point

77
00:04:27,000 --> 00:04:32,000
and 1 equals, this would be the opposite of equals equals,

78
00:04:32,000 --> 00:04:38,000
while the exclamation point with 2 equals is the opposite of 3 equals.

79
00:04:38,000 --> 00:04:41,000
These are the ways we can compare our numbers.

80
00:04:41,000 --> 00:04:44,000
We can place this expression in an if statement, for instance,

81
00:04:44,000 --> 00:04:48,000
to control the flow of our program based on the equality

82
00:04:48,000 --> 00:04:54,000
or inequality of an expression of numbers like this.

83
00:04:54,000 --> 00:05:03,000
&quot;if  (1 &lt; 2) console.log(&quot;Yes&quot;),&quot; 

84
00:05:03,000 --> 00:05:10,000
and we could use &quot;else console.log(&quot;No&quot;).&quot;

85
00:05:10,000 --> 00:05:12,000
And this is just like we did with strings.

86
00:05:12,000 --> 00:05:16,000
We just simply put our comparison operator inside the if statement here,

87
00:05:16,000 --> 00:05:20,000
and it will branch based on the truth of that inequality or equality.

88
00:05:20,000 --> 00:05:22,000
We can check it out, and we can see, of course,

89
00:05:22,000 --> 00:05:26,000
yes is the branch that actually gets run.

90
00:05:26,000 --> 00:05:30,000
JavaScript provides us with a pretty large library of mathematical functions

91
00:05:30,000 --> 00:05:33,000
and constants we can use when we're doing math in JavaScript.

92
00:05:33,000 --> 00:05:37,000
Up next, we'll take a look at where we can find those functions.

93
00:05:37,000 --> 00:05:40,000
[? Music ?] [Treehouse] 

