1
00:00:00,000 --> 00:00:07,000
[? Music playing ?] [Treehouse]

2
00:00:08,000 --> 00:00:10,000
JavaScript provides us with a wide variety of functions

3
00:00:10,000 --> 00:00:13,000
and constants that are useful when doing math.

4
00:00:13,000 --> 00:00:17,000
These are stored in the Math Object, so let's take a look.

5
00:00:17,000 --> 00:00:20,000
So we've seen the different ways of creating numbers and comparing numbers,

6
00:00:20,000 --> 00:00:22,000
but there are a few more things that we would want to do

7
00:00:22,000 --> 00:00:28,000
with numbers that aren't able to be done with just the simple operations that we have here.

8
00:00:28,000 --> 00:00:35,000
For instance, rounding numbers, getting random numbers, doing square roots, or powers,

9
00:00:35,000 --> 00:00:38,000
or, for instance, maybe operations like sine and cosine,

10
00:00:38,000 --> 00:00:40,000
the trigonomic functions that we would want to use

11
00:00:40,000 --> 00:00:43,000
for instance if we're doing some sort of geometry.

12
00:00:43,000 --> 00:00:47,000
Fortunately, JavaScript provides an object called Math,

13
00:00:47,000 --> 00:00:50,000
and that's Math with a capital M.

14
00:00:50,000 --> 00:00:56,000
And there are different properties and methods on this that relate to common mathematical operations.

15
00:00:56,000 --> 00:00:59,000
Let's say we want to create a random number.

16
00:00:59,000 --> 00:01:03,000
So we can create a variable called U,

17
00:01:03,000 --> 00:01:05,000
and to create a random number, we use our Math Object.

18
00:01:05,000 --> 00:01:08,000
So, that's capital M-a-t-h,

19
00:01:08,000 --> 00:01:12,000
and then there are either properties or methods that we want to call on it.

20
00:01:12,000 --> 00:01:16,000
To get a random number, we want to do the random method.

21
00:01:16,000 --> 00:01:22,000
So do Math.random, and then use parentheses to call it.

22
00:01:22,000 --> 00:01:28,000
So if we refresh, go to our page, and we evaluate U,

23
00:01:28,000 --> 00:01:33,000
which is the number we just assigned to Math.random's value,

24
00:01:33,000 --> 00:01:38,000
we'll see we get a number 0.407 blah blah blah,

25
00:01:38,000 --> 00:01:45,000
and this is because Math.random returns a value between 0 and 1.

26
00:01:45,000 --> 00:01:47,000
Now this may not be exactly what you want.

27
00:01:47,000 --> 00:01:51,000
You may have been wanting a number 0 through 10.

28
00:01:51,000 --> 00:01:53,000
Well, here's how we can do that.

29
00:01:53,000 --> 00:01:57,000
Because Math.random will return a value between 0 and 1,

30
00:01:57,000 --> 00:01:59,000
the upper bounds is obviously 1,

31
00:01:59,000 --> 00:02:06,000
but if we wanted a number 0 through 10, our upper bounds for that range would be 10.

32
00:02:06,000 --> 00:02:11,000
So an easy way of doing that would be multiplying it by 10.

33
00:02:11,000 --> 00:02:17,000
So now if we refresh, we should now get a number between 0 and 10.

34
00:02:17,000 --> 00:02:19,000
We get 9.2.

35
00:02:19,000 --> 00:02:22,000
Again, every time we refresh it, we're going to get a different number

36
00:02:22,000 --> 00:02:25,000
because random, every time it is called, will give us a different number.

37
00:02:25,000 --> 00:02:31,000
So if we keep saving and refreshing, we should get, hopefully, numbers between 0 and 10.

38
00:02:31,000 --> 00:02:34,000
Now, obviously the numbers that we get here are between 0 and 10,

39
00:02:34,000 --> 00:02:36,000
but they're not whole numbers.

40
00:02:36,000 --> 00:02:39,000
So what could we do? Well we could round them.

41
00:02:39,000 --> 00:02:44,000
So let's take this whole expression here, our Math.random times 10,

42
00:02:44,000 --> 00:02:51,000
and let's call another method that's on the Math Object called round.

43
00:02:51,000 --> 00:02:56,000
So what round will do is it will take a number and round it to the nearest whole  number.

44
00:02:56,000 --> 00:03:01,000
So, again, what this will do is it will round it to the nearest number.

45
00:03:01,000 --> 00:03:08,000
So now we get 1, in this case, but we should always get a whole number between 0 and 10.

46
00:03:08,000 --> 00:03:10,000
So let's take a look at what round does.

47
00:03:10,000 --> 00:03:23,000
So if we take a variable V and do Math.round(2.3), V should be 2,

48
00:03:23,000 --> 00:03:28,000
and if we do 2.7, round should round up to 3.

49
00:03:28,000 --> 00:03:33,000
And then if we do 2.5, it will round up to 3 as well.

50
00:03:33,000 --> 00:03:39,000
So Math will round up from .5 and down for anything below .5.

51
00:03:39,000 --> 00:03:45,000
Now, what if you always want to round down?

52
00:03:45,000 --> 00:03:49,000
We can do Math.floor,

53
00:03:49,000 --> 00:03:55,000
and if we put in 3.7, W should always be 3.

54
00:03:55,000 --> 00:03:58,000
So it will always round down.

55
00:03:58,000 --> 00:04:02,000
If we want to do the opposite and always round up, we'll use Math.ceil.

56
00:04:02,000 --> 00:04:06,000
And that's c-e-i-l, which is short for ceiling.

57
00:04:06,000 --> 00:04:13,000
And if we did, for instance, 6.2, Math.ceil of 6.2 would be 7.

58
00:04:13,000 --> 00:04:15,000
Now there are a couple of other methods.

59
00:04:15,000 --> 00:04:24,000
For instance, if you wanted to take the power of something, we could do var Y = Math.pow,

60
00:04:24,000 --> 00:04:26,000
and this takes 2 arguments, the base and the exponent.

61
00:04:26,000 --> 00:04:35,000
So if you wanted to take 2 to the power of 5, we'll do Math.pow(2,5).

62
00:04:35,000 --> 00:04:39,000
And Y would be 32.

63
00:04:39,000 --> 00:04:41,000
And we also have the square root method.

64
00:04:41,000 --> 00:04:47,000
So we'll take Z=Math.sqrt for square root.

65
00:04:47,000 --> 00:04:53,000
So this just takes 1 argument. So say the square root of 4. Z should be 2.

66
00:04:53,000 --> 00:04:58,000
And this will work for things that won't square root so easily like 5.

67
00:04:58,000 --> 00:05:05,000
You get 2.2, or for instance, the square root of 2 will 1.414.

68
00:05:05,000 --> 00:05:07,000
Now there are quite a few different things in the Math Object

69
00:05:07,000 --> 00:05:11,000
that you may want to use at certain points in your programs.

70
00:05:11,000 --> 00:05:14,000
You'll know them when you need them, for instance, sine or cosine.

71
00:05:14,000 --> 00:05:20,000
But we can take a look at what our options are just by typing in Math into the console here

72
00:05:20,000 --> 00:05:23,000
and expanding it out.

73
00:05:23,000 --> 00:05:27,000
You can see we have things like floor, ceil, rand, pow,

74
00:05:27,000 --> 00:05:30,000
things like min and max, which are nice.

75
00:05:30,000 --> 00:05:38,000
For instance, if we take Math.min and pass in 2 and 4, it will return us the minimum,

76
00:05:38,000 --> 00:05:42,000
and similarly maximum will return the maximum.

77
00:05:42,000 --> 00:05:47,000
And you can add as many arguments as you like to Math.min or max.

78
00:05:47,000 --> 00:05:50,000
So anytime you need the min or max, you can get those.

79
00:05:50,000 --> 00:05:54,000
Sine, cosine, and tangent are available in sine, cos, and tan.

80
00:05:54,000 --> 00:06:01,000
As well as arc sine, arc tan, and arc cos in acos, asine, and atan.

81
00:06:01,000 --> 00:06:04,000
Again, depending on what you need to do, you may never use these,

82
00:06:04,000 --> 00:06:07,000
but if you're doing some interesting geometry, obviously these will come in handy.

83
00:06:07,000 --> 00:06:11,000
Also, we have abs, which will return the absolute value.

84
00:06:11,000 --> 00:06:19,000
So, Math.abs of -1 would be 1.

85
00:06:19,000 --> 00:06:23,000
Finally, you'll see up here we have some things that aren't methods,

86
00:06:23,000 --> 00:06:28,000
but instead they are constants or simply properties of the Math Object.

87
00:06:28,000 --> 00:06:34,000
So if you need a pretty decent value of pi, you can do Math.pi.

88
00:06:34,000 --> 00:06:43,000
So Math.pi, which is 3.14159 down a few decimal places.

89
00:06:43,000 --> 00:06:50,000
Or if you need e or if you need the natural log of 10 or the value of e or the square root of 2,

90
00:06:50,000 --> 00:06:54,000
these are all constants that are stored in the Math Object.

91
00:06:54,000 --> 00:06:58,000
Anytime you need to refer to it, I recommend just taking a look at Math in your console,

92
00:06:58,000 --> 00:07:03,000
and it will give you the list of constants and functions

93
00:07:03,000 --> 00:07:06,000
that will be commonly used in mathematical operations.

94
00:07:06,000 --> 00:07:09,000
[? Music playing ?] So now you should be familiar with all the tools you'll need

95
00:07:09,000 --> 00:07:12,000
to use when doing math in JavaScript.

96
00:07:12,000 --> 00:07:15,000
[? Music playing ?] [Treehouse]

